<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Culture of Development</title>
  
  <subtitle>The Pit of Success</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://culture-of-development.com/"/>
  <updated>2019-08-02T18:03:06.649Z</updated>
  <id>http://culture-of-development.com/</id>
  
  <author>
    <name>Nick Larsen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to prepare for your next interview</title>
    <link href="http://culture-of-development.com/blog/how-to-prepare-for-your-next-interview/"/>
    <id>http://culture-of-development.com/blog/how-to-prepare-for-your-next-interview/</id>
    <published>2019-08-02T18:46:41.000Z</published>
    <updated>2019-08-02T18:03:06.649Z</updated>
    
    <content type="html"><![CDATA[<p>Your next interview is coming up and you feel excited, nervous and you are definitely experiencing some notable anxiety that you are not used to.  Interviewing <em>is</em> a huge deal!  You're making a huge life change, you're going to meet a lot of new people, you're going to be focusing on totally new problems and you feel like you're going to have to prove yourself to a bunch of people all over again.  And on top of all that, you're going to have to face some of your demons like coding in front of other people are solving problems on a timer.</p><p><img src="/img/hackerrank-codepair-screenshot1.png" alt="Online coding interview"></p><h6><a href="https://www.hackerrank.com/products/codepair/" target="_blank" rel="noopener">image source</a></h6><p>Largely this anxiety comes from not really knowing what to expect in the interviews and not wanting to be in this situation for very long.  Not wanting to be in this situation for very long is a real concern that almost everyone faces, and unfortunately I don't have a solution for that.  What I do have a solution for is telling you what to expect so that you get an offer you'll be happy with a lot sooner.</p><p>We're going to cover the main topics you are being evaluated on, and give some pointers on how to improve your standing in each area by the end the interview.  First we'll break down the key topics, then we'll explain them in more detail, and at the very end, we'll cover the most common question patterns you will almost certainly be asked.</p><h2>The problem solving process</h2><p><strong>You are being hired to solve problems.</strong>  I cannot reiterate this enough.  You are <em>not</em> here to write code, you are here to <em>solve problems</em>.  Problems can be product related, code related, people related, process related, whatever, your job is to solve problems.  Writing code is just one method for implementing the solution to a problem.  As you are interviewing, the expectation is that you will be writing code to implement solutions, so that's what they are going to test you on, however, it's your problem solving skills that really make the difference between passing the interview or not.  So let's break down the problem solving process and see how all the parts fit together.</p><h3>The problem description</h3><p>Problems are a description of something that needs to be accomplished.  Problems are things like &quot;we need to order all the items in this array by ascending value&quot;.  This is the sorting problem.  There are lots of ways to solve the sorting problem, and you can sort things without a computer as well, for instance alphebetizing medical records in a filing cabinet.  A problem statement is just a description, it does not in any way, shape or form insinuate a specific solution.</p><p>There are lots of problems, but just to highlight a few common problems that you might run into in your work, it's things like:</p><ul><li>we need more customers buying things on our website</li><li>we need to make it easier to find the answers to your questions</li><li>we need identify the toxic content on our website</li></ul><p>If you have ever run into any of these problems in your work, your brain is probably filled with ideas just because you read those problem statements, and that's the point, a problem can have tons of solutions.  It's your job to find a good solution to the problem at hand.</p><h3>The approach</h3><p>An approach is a high-level idea about how to solve a problem.  It does not specify implementation details, it only provides an outline for the key components of a solution.  Coming up with a valid approach is the actual act of solving a problem.  This is why you are not here to code, you are here to solve problems.  You need to come up with valid, working approaches to each problem.  And once you have that, it can be anybody's problem to implement it.</p><p>To continue with the sorting example, an approach is something like &quot;find the lowest value and put it in the first location, then repeat this process on the remaining unsorted elements until all elements are sorted&quot;.  This is a totally valid and working approach.  Again, notice it does not specify a particular algorithm, it's just a general idea about how to solve the problem and it can be implemented in many ways.  This general approach is the basis of numerous sorting algorithms which we'll go through in a moment.</p><p>Once you have an approach, <strong>you have solved the problem</strong>; you have accomplished the primary thing you are being hired to do.  One very common mistake people make here is to &quot;think in code&quot;, which essentially means that you drop down to only consider what tools you are familiar with.  You may have heard the saying &quot;if all you have is a hammer, all the problems start looking like nails&quot;.  If you can't think of a way to solve it using some tool you know then all of a sudden you are stuck.  This is a huge mistake.  It's like trying to fix the shower wall in a bathroom, but the only tool you know how to use is duct tape, so you start describing how to use duct tape to hold the tiles to the wall.  Instead you should describe the approach as attach the tiles to the wall, then you have still solved the problem, and you can worry about the implementation details later.</p><p><img src="/img/duct-tape-fix.jpg" alt="duct tape wall"></p><h6><a href="http://www.startribune.com/top-20-home-inspection-photos-from-2015/364228611/" target="_blank" rel="noopener">image source</a></h6><p>Instead I strongly urge you to <strong>solve all problems like a human, not like a computer</strong>.  Think about if you had that filing cabinet full of medical records and you had to sort it alphabetically, what would you do?  Are you going to come up with the most efficient answer on the first try?  Probably not, but you <em>are</em> going to solve the problem, and once a problem is solved and we have a working solution, we can iterate on it.  If you don't have a working solution, you're busted and you're not getting the job.  Just solve it naively and we'll work through better solutions later on.</p><h3>The technique</h3><p>Techniques are actual implementation details of solution.  This is the point where you start talking about specific algorithms and how you are going to apply them to the data given to you.  As noted above, there are tons of different ways to implement a sort based on finding the smallest value first.  Some of the most common are selection sort, bubble sort and insertion sort but there are plenty of others as well.  There are lots of techniques to implement an approach.  You are well aware, I'm sure, that these are not fast sorting algorithms.  That's not the point, the point is that you solved the problem.</p><p><img src="/img/home-alone-plan.jpg" alt="Home Alone battle plan"></p><h6><a href="https://slate.com/culture/2015/11/home-alone-hit-theaters-25-years-ago-heres-how-they-filmed-its-bonkers-finale.html" target="_blank" rel="noopener">image source</a></h6><p>As you work through the details of your approach and apply the various techniques you need to solve your problem, you might find that they are slow.  At that point, you have a good indication that you need to modify your approach.  In the case of sorting, the approach of repeatedly finding the lowest value essentially boils down to performing local comparisons, i.e. items that are side by side in the array.  If you instead compare items that are far away from each other, then when you swap those you can eliminate multiple inversions at a time.  This is the basis of another large group of sorting algorithms, namely quicksort and merge sort, but again there are others as well.</p><p>This sort of back and forth from problem solving to identifying limitations that lead you to other approaches is a big part of what you learn through first hand experience.  It's okay that you don't come up with the best approach on the first try, again it's always most important that you just have a working solution.  There is a long philosophical conversation to be had here, but the jist of it is that you should just understand that we might come up with better algorithms for any problem tomorrow, even the ones we think are mostly solved today.  So don't worry about trying to come up with the best solution, a working solution is worth 99% of the credit.  Usually you will only have to worry about performance if the max time or amount of memory your algorithm is allowed to use is specified in the problem description.</p><h3>The code</h3><p>The code is pretty straightforward, it's the actual text you write that implements your solution.  I'm not going to say much here because there's only one thing we care about really and that's that you write code that works when you run it.  In an interview, don't worry about writing perfectly styled code so much, just focus on getting to a working solution as quickly as possible.</p><h2>Understanding the key skills</h2><p>Now that you have a good idea of what the problem solving process looks like, let's see how you can highlight the specific skills that companies are looking for.</p><h3>Problem solving skills</h3><p>If it isn't clear yet, you are being hired to solve problems.  Focus on that first; verbally announce an approach before you get start coding on every single problem.  This gives the interviewer an opportunity to ensure your approach is valid and make sure that you are working toward your given approach during your implementation.  When they are convinced this approach will work, then start your coding.</p><p>Another really big point here is that when you announce a valid approach, you are given much more leeway on the coding part of the interview because they know what you are trying to.  When you fail to announce an approach, you are forcing the interviewer to judge your problem solving skills entirely based on the output of your code and whether or not it passes all the test cases.  You can essentially get full credit for problem solving skills by just announcing a valid approach before you start.  Good interviewers will force you to tell your approach before you start coding, but you should make this a habit as you practice for your next interview.</p><p>I also want to stress again to solve the problem like a human during an interview.  It is critical that your interviewer believes that your solution will work so being expressive and easy to understand are critical when explaining your approach.  Cleverness is usually difficult to understand and more tricky to implement so it's generally a good idea to avoid it during an interview.</p><h3>Coding skills</h3><p>Coding skills are the ability to take a given approach and convert it into working code.  This is <em>not</em> problem solving, this is highlighting the techniques you are familiar with and your knowledge of your language of choice.  If you are given the option to choose your own language, <em>always</em> choose the one you are most familiar with and make no exceptions on this point because you will only handicap yourself.  If they tell you what language you have to write in, then it is what it is.</p><p>There's not a lot to say about the coding skills other than can you produce working code in the amount of time you have for the interview or not.  For most companies, this part of the grading is almost entirely binary, you pass or fail.  Style matters very little, but you should still aim to be expressive and parsable.  Expressive code is easy to understand and parsable code makes it easier to figure out which lines of code go with other lines, e.g. ensuring that all the statements within a block have the same indentation.  If your code works, the style doesn't count for much, but when it doesn't work having more expressive and parsable code makes it easier for the interviewer to help you find the trivial mistakes.</p><h3>Debugging skills</h3><p>Debugging is the process of locating the source of an error.  It is not problem solving, it is not coding, it is just detective work and once you identify the source of the problem, then you head back to coding or problem solving land.  This skill is incredibly valuable because getting stuck in an interview is an almost certainty, and debugging is how you get unstuck.</p><p><img src="/img/manyadventures-01.jpg" alt="Winnie the Pooh stuck"></p><h6><a href="https://www.dvdizzy.com/manyadventures-bluray.html" target="_blank" rel="noopener">image source</a></h6><p>There are three primary kinds of getting stuck that require debugging in an interview.  The first is syntax errors and you can identify the source of most of those by looking at the line numbers in the compiler output.  Just go to that line and fix the problem.</p><p>The second is logic errors, this is the most common type of blocking error you run into during an interview.  Debugging these errors is also very simple but no one ever really teaches it, not in school, not in bootcamps and not really on the job either, you just sort of develop a sense for it, but luckily for you, here's primer on how to do it effectively.  First set your expectation.  Each line of code you write has some values going into and it produces some new values.  Find the line of code, one by one, where your expected output for the previous line is violated.  Use print lines after each statement to validate that the current state matches your expectations.  One of them <em>will</em> eventually be different from your expectations and then you are done debugging.  It really is that easy but so many people don't do it that it stands out in an interview.  Use this <strong>methodical</strong> approach to locating the source of logic errors.</p><p>If there is no compiler available, then use a minimal example and walk through your code operation by operation, keeping track of all the variables (and I mean <em>all</em> the variables).  <strong>Do not skip operations!</strong>  This is the most common mistake I see when people are writing code without a compiler; they read only what they <em>expect</em> to happen, and don't track what is <em>actually</em> happening.  This is a very natural thing, and one of the reasons you usually cannot effectively edit your own writing because you have a tendency to read what you intended to write, not what you actually wrote.  Track all the variables, write them down if you have to, and make sure you explicitly say the values out loud going into each statement, especially conditionals like <code>if</code> and <code>for</code> loop conditions.</p><p>The third kind of error you run into is a timeout error.  This happens when you write inefficient code and it runs too slow against larger datasets.  This is a much more difficult error to fix usually because it is a clear indication that your approach is not going to work.  If the output is correct, but it's taking too long, then printing intermediate results is not going to help.  Instead you need to time each line to find the lines that are taking the longest.  <em>Do not guess</em> which lines are slow because unless you are an expert, you will almost certainly be wrong!  Time <em>each</em> line, then when you identify the slow part, consider other approaches that might be faster.</p><p>Debugging skills are critical to your long term success as a developer but they take time to develop.  Don't worry if this is the part you struggle with the most right now, just focus on making small improvements to your process each time you run into a error.</p><p>As the interviewee, debugging can be really frustrating, especially in your first few interviews because you feel like it looks bad that you wrote a bug.  Here's a secret, bugs happen all the time.  In the entire time that you are a developer you will only write bug free code a handful of times per year.  And then in a few weeks or months, someone will come along and the find the bugs for you.  The most important thing to realize when you write a bug in an interview is to not panic.  Just shift out of code writing mode, and shift into debugging mode as seamlessly as possible.  Practicing interview questions is more about mastering this transition than learning to write bug free code.</p><p><img src="/img/drake-debugging.png" alt="Drake says &amp;quot;don't panic when you see an error&amp;quot;"></p><h2>Things you will almost certainly be asked in your first few technical interviews</h2><p>The first thing is you need to practice some technical interview questions before you go into your first few interviews.  There are tons of sites you can do this on, such as <a href="http://leetcode.com/" target="_blank" rel="noopener">leetcode</a>, <a href="https://www.hackerrank.com/" target="_blank" rel="noopener">hacker rank</a>, <a href="https://www.codility.com/" target="_blank" rel="noopener">codility</a>, <a href="https://projecteuler.net/" target="_blank" rel="noopener">project Euler</a> and tons of others.  The best thing about practicing on these sites is that often times companies will use these sites as the first filter to getting a job there, so being familiar with them can help ease that early anxiety.  In addition to that, doing some simple coding right before you get into a technical interview will help you warm up your problem solving skills.</p><p>Next is to learn <a href="/blog/how-to-talk-about-yourself-in-an-interview/">how to talk about yourself in an interview</a>, which I have written about previously, so just read up on that.</p><p>As for the technical questions you will run into, I can't tell you for sure, but you can do a little homework to help you get an idea.  Here are some really common question types which are the basis of tons of interview questions, just worded differently.</p><p>The first is string manipulation.  Just learn all of the string manipulation functions in your language of choice.  This includes regex.  You don't need to be an expert in these things, but you need a working knowledge of them.  I also highly recommend learning common parsing functions, such as how to convert a string to an integer or a double.  While you probably won't have to parse a CSV file as part of your interview, your function will often be given input in string format.  Being prepared to convert it into a workable format for solving the problem will eliminate a lot of time spent looking up documentation.</p><p>The second really common thing is improving the runtime complexity of problems that can be naively solved using nested lists.  This has been written about time and time again, so just go read <a href="https://dev.to/healeycodes/solving-puzzles-with-high-performance-javascript-3o4k" target="_blank" rel="noopener">this really well written example</a>.  The jist is that you preprocess one of the lists into a set or map in order to enable fast lookups.</p><p>And that's really it.  Just to summarize, understand what skills the people interviewing you are looking for, then learn the common problem types, practice practice practice and don't panic when you write bugs during the interview, just focus on locating the source of the error quickly.</p><p>If you have any questions, feel free to reach out, you can find my information on <a href="https://mentors.codingcoach.io/" target="_blank" rel="noopener">mentors.codingcoach.io</a> or post in the comments below or on reddit.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Your next interview is coming up and you feel excited, nervous and you are definitely experiencing some notable anxiety that you are not 
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>How we sped up random forest processing, lots of common performance patterns</title>
    <link href="http://culture-of-development.com/blog/how-we-sped-up-random-forest-processing-lots-of-common-performance-patterns/"/>
    <id>http://culture-of-development.com/blog/how-we-sped-up-random-forest-processing-lots-of-common-performance-patterns/</id>
    <published>2019-06-28T02:43:18.000Z</published>
    <updated>2019-10-10T15:09:33.493Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/">the previous article</a> we outlined our problem, the major constraints we must adhere to and wrote a straightforward implementation of a random forest evaluator.  We proved the correctness of the implementation and then we set up a naive benchmark to test how much time it was going to take to run 5,000 samples through 1,000 trees, each of a maximum depth of 5 decision nodes.  This currently runs in about 320 ms and we need it to run in about 25 ms.</p><p>As a quick reminder, here is a condensed version of the code from the previous article, ignoring most of the boilerplate:</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DecisionTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecisionTreeNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> FeatureIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> TrueBranch &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> FalseBranch &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTreeNode[] nodes;<span class="comment">// set in the constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Evaluate</span>(<span class="params"><span class="keyword">double</span>[] features</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> node = nodes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(node.FeatureIndex != <span class="number">-1</span>) <span class="comment">// LeafIndex = -1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nodeIndex = features[node.FeatureIndex] &lt; node.Value ? node.TrueBranch : node.FalseBranch;</span><br><span class="line">            node = nodes[nodeIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">RandomForest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTree[] trees; <span class="comment">// set in the constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">EvaluateProbability</span>(<span class="params"><span class="keyword">double</span>[] instance</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = trees.Sum(t =&gt; t.Evaluate(instance));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>f / (<span class="number">1</span>f + Math.Exp(-sum)); <span class="comment">// conversion to probability</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>From a correctness standpoint, this code is just fine; that's what the correctness test is there for after all.  From a performance standpoint, however, we still have a ways to go.  In these 34 lines of code there are an incredible amount of very common performance related issues we can address.  Let's take a look at some now.</p><h3>The lambda function tax</h3><p>Linq is an amazing technology that allows you to write extremely expressive code using a declarative syntax.  Want to sum up the results of calling a function on each and every element of an array?  One liner.  And reads almost like the English sentence I just used to describe it.  It's a wonderful tool.</p><p>But it has some drawbacks.  The work-performing argument to nearly every linq operation is a function.  If you're not careful about the functions you use as arguments, you might be leaving a fair amount of performance lying on the floor.</p><p>Usually, as in this example above on line 31, the function argument is passed as a lambda function.  When a lambda function is executed, it runs in the context in which it was declared, meaning it has access to the variables in that scope.  This is how we are able to use the <code>instance</code> argument which is a local variable to the <code>EvaluateProbability</code> function without declaring the <code>instance</code> variable in the lambda itself.</p><p>Creating the context for a lambda function is a relatively expensive task.  You won't notice it if you only ever generate a few contexts for a particular lambda, but if you are doing it over and over, the taxes start to add up and in our case we're doing this about 5,000 times per request.</p><p>There are a few ways to solve this problem, but the most straightforward methods are to either 1) don't use a lambda function as the delegate parameter to a linq function where it's not necessary, or 2) don't use linq. In this case we do need the context in order to get the <code>instance</code> variable, so fix #1 isn't really an option and we should just get rid of our use of linq.</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">EvaluateProbability</span>(<span class="params"><span class="keyword">double</span>[] instance</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trees.Length; i++)</span><br><span class="line">        sum += trees[i].Evaluate(instance);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>f / (<span class="number">1</span>f + Math.Exp(-sum)); <span class="comment">// conversion to probability</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Simple enough.  It's a little harder to read, but that's just how it goes sometimes.  Let's see what kind of effect this had on the timing.</p><blockquote><p>[6/28/2019 12:15:04 AM] Time taken for 5000 evaluations: 267.5595 ms</p></blockquote><p>That's a 16.37% reduction in time; that's nothing to shake a stick at.  Let's be really clear when this kind of optimization matters.  When a user visits the site, we need to perform this calculation for roughly 5,000 jobs, and at peak hours we're going to be handling roughly 450 requests per second.  This code gets called <em>a lot</em>.</p><p>If this were only happening once per request, we wouldn't worry about this kind of optimization because 450 times per second just isn't that much.  But when you have code that's being called ~2,000,000 times per second, for hours on end, the lambda tax adds up very fast.</p><h3>Arrays of classes</h3><p>In .NET, there are classes, which are reference types, and there are structs, which are value types.  Classes are usually larger data structures in terms of maximum possible bytes used and they can be null where as structs are usually smaller and they can not be null.  When passing a value type to a function or setting a new variable to a value type, a full copy is made, where as with reference types, only the reference is copied.</p><p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">This gif never gets old. <a href="https://t.co/QFz78yi28o" target="_blank" rel="noopener">pic.twitter.com/QFz78yi28o</a></p>&mdash; Eric L. Barnes (@ericlbarnes) <a href="https://twitter.com/ericlbarnes/status/1138528829692174337?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">June 11, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>When creating an array, reference types are stored as an array of references, where as value types are stored directly in the array.  In order to access the data of a reference type, you first have to go to the memory location of the reference, then do what you need with the data there.  Value types on the other hand point directly to the memory location where the data is stored.  The best was I can describe this is with a picture.</p><p><img src="/img/array-of-classes.png" alt="Array of classes versus array of structs"></p><p>In the array of classes, the array itself only contains references to the memory locations, and if you want to access them, you need to go look up that memory location before you can use the data in that class.  If we instead switch that class to a struct, then we end up in the situation of the second part of the image above.  In this case, we avoid the extra lookup, and gain some performance.</p><p>From a code perspective, this change seems trivial:</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecisionTreeNode</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// becomes</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> DecisionTreeNode &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><p>Don't go switching all your classes to structs just yet however.  There are a lot of concerns to consider when deciding if an entity should be a class or a struct and there are plenty of other places on the internet where you can find good discussion about this topic.  In this instance, the respresentation of my entity is not intended to be exposed beyond my library, which gives us a lot of freedom around it's design and so we optimize for performance.</p><p>Under the assumption we are only going to expose the <code>RandomForest</code> class on our API and not the <code>DecisionTree</code>, we can use this same technique for the <code>DecisionTree</code> class to struct as well.  We won't see nearly as large of a speedup however because we're accessing the trees many fewer times than the nodes and we still have to pay the price to lookup the nodes array reference.</p><blockquote><p>[6/28/2019 12:48:32 AM] Time taken for 5000 evaluations: 184.1993 ms</p></blockquote><p>Holy cow those extra lookups appear to have been quite impactful.  We're now at a 41.82% total reduction in time.  If you were still shaking your stick after the last one, I can see your argument, but after this one, now you just look crazy.  Put the stick down.</p><p>Some things to note about this change...</p><p>Part of our performance win comes from the way properties are handled in classes versus structs.  Structs cannot be inherited from, so when it calls the function to get the value of the property, it can be sure which function exactly needs to be called.  Since classes can be inherited from and the functions can be overridden, the actual function that needs to get called has to be looked up based on the type of the class pushed to the reference.  This is how you can have two different implementations of the same base class, and still the correct function gets called even when you are holding a reference to the base class and not actual implementation.</p><p>In the case that your properties are simply wrappers to a field, you can explicitly eliminate the getter calls by just making them fields instead properties.  If you are compiling with optimizations on (default for release builds) then the JIT appears to be smart enough to inline the property calls for you anyway and you don't need to worry about it.</p><p>And lastly, since structs cannot be null, there is no point in the function call checking if the instance is null or not which saves some additional work.</p><h3>Shrinking the representation</h3><p>There are tons of trees, 1,000 to be exact, and each of them can have up to 64 nodes each, and each tree node has 3 ints and 1 double.  In practice there are 50,488 total tree nodes in the full model and each one is using 20 bytes each, for a total size of about 2.5 MB.  During any given request we have to run 5,000 jobs through these 2.5 MB<sup>1</sup> and what you end up with is a lot of churn.  Since we cannot really change the feature representation without changing the model, we should look to reduce the size of the trees themselves in order to reduce the memory churn.</p><p><small><sup>1</sup> This is a bit of an exaggeration because we're only going to touch about 5,000 nodes on average for a single evaluation based on the path taken through the trees.<small></small></small></p><p>This point is a bit of a crossroads in the design process for this solution.  We <em>can</em> shrink the representation, but each time we do we're effectively making this implementation less and less a general tool and moving more in the direction of trying to solve the specific model given to us.  In any case, we have a long way to go right now in our performance quest, so let's go full specific model and once we get to our goal, <em>if</em> we get to our goal, we'll back it out and try to make it more general purpose.  The decision is made.</p><p>Considering we only care about this specific model, we know there are only 840 features, and you only need a short to store all possible feature indices.  We also know that each tree contains no more than 64 nodes, so our branches only need to be the size of individual bytes.  And lastly, as long as verification test passes, we're willing to accept any size reduction in the value representation as well, so let's try a float instead of a double.</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> DecisionTreeNode</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">short</span> FeatureIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> TrueBranch;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> FalseBranch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>[6/28/2019 1:29:09 AM] Time taken for 5000 evaluations: 157.3987 ms</p><p>[6/28/2019 1:29:10 AM] Correctness verified.</p></blockquote><p>Now we're down to 8 total bytes per node.  Our full model size just went from about 2.5 MB down to 404 KB.  And it looks like we're good to go on the correctness so we'll take it.  We shaved off another 27 ms bringing us to a total of 51.29% time reduction.</p><p>But hold up, there's one more issue we really need to address that was made prominent by this last change.  When you want to access a data type that is 4 bytes wide (the <code>Value</code> in this case), it's more efficient to align it in memory to an address that is divisible by 4.  There is a lot of nuance around this which is beyond the scope of the discussion here, but this problem pops up really bad when you are basically guaranteeing this alignment will be off, which is what we did by changing the <code>FeatureIndex</code> from an <code>int</code> (4 bytes) to a <code>short</code> (2 bytes) and forcing the full size of the <code>DecisionTreeNode</code> to exactly 8 bytes.</p><p>When you ask for memory, most memory allocators are aware that aligned memory is more performant and will give you memory starting with an aligned address.  In this case our <code>FeatureIndex</code> is accessible at the aligned address, however the <code>Value</code> is not and it's 4 bytes in length.  Since our full data structure is exactly 8 bytes, and it's an array of structs, we're pretty much in a bad spot.  This alignment issue means it can be a fair bit more expensive to load the non aligned value.  Luckily, the fix is really simple, you just swap the order of the fields in your class definition.</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> DecisionTreeNode</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">short</span> FeatureIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> TrueBranch;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> FalseBranch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>[6/28/2019 1:52:04 AM] Time taken for 5000 evaluations: 133.6665 ms</p></blockquote><p>And there we go.  Better alignment for 4 byte data types, better performance.  58.72% total improvement so far.</p><hr><h3>Major Edit</h3><p><a href="https://github.com/culture-of-development/random-forest-perf-blog/issues/1" target="_blank" rel="noopener">An awesome visitor to this post</a> pointed out that this performance bump was not due to better alignment of 4 byte values, but was instead due to better cache alignment.  What does that mean exactly?</p><p>The C# compiler attempts to help you out with the exact issue described above and adds padding to your struct in order to guarantee alignment of 4 byte values.  So when I thought we had reduced our 20 byte structure to 8 bytes, in fact we had only shrunk it down to 12 bytes.  The reordering of the fields eliminated the need for this padding and achieved the actual 8 bytes struct size.  This results in better cache access and accounts for the majority of the performance bump.</p><hr><h3>Fast access to the root of each tree</h3><p>This last one is a bit of a hack.  We just spent a bunch of time squeezing out chunks of performance from the tree nodes which get used a ton, let's take a step back and see if we can speed up dealing with whole trees.</p><p>No matter what, we're going to have to pay the lookup price for the <code>nodes</code> array.  What we can do however is add a field to each tree that is a copy of the first node so that we effectively have the first node right next to the reference in our array of trees.  Essentially, at the same time that we get the reference to all nodes, we also get the full root node of the tree available, and we can start processing the first iteration of the loop while some magic<sup>2</sup> happens in the background to prefetch the first page of memory containing the nodes.</p><p><small><sup>2</sup> It really is magic, but we will discuss it more depth in the fourth installment of this series.<small></small></small></p><p>It should be noted that this only works because our tree node is a struct, and therefore lives right in line on the same memory that has the reference to the first array node.  If the <code>DecisionTreeNode</code> was a class, this would not work because it would store a reference to the exact same memory location at the front of the array of all nodes, and we would still eat the latency of that extra lookup.  This also would not work if our work loop in the <code>Evaluate</code> method was a tight loop with very few instructions.  Because we're doing a lot of work in here, we get the option to hide the latency of the memory lookup by pulling the useful information at the same time we load the reference to the tree.</p><blockquote><p>[6/28/2019 2:00:50 AM] Time taken for 5000 evaluations: 116.4636 ms</p></blockquote><p>And another 17 ms bites the dust bringing us to a grand total of 63.21% reduction in time.  That's not too shabby for literally just changing the implementation details without altering the overall approach.  We're now within a factor of about 4 to 5 of where we need to be, down from a factor of 12 to 13.  A good days work.</p><p>Of all the patterns we've exploited so far, this last one I expect you will end up using the least; again, it's basically a hack.  I decided to include this here because it really highlights the impact of optimizing for memory access latency.  By getting some work in while we wait for the array memory to load, we were able to shave off 13% of the time on something that's already getting pretty fast.  At this point we're firmly in the land of micro-optimizations, but at this scale, things like this can have a dramatic impact.</p><p>Let's take a look at where we're at:</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> DecisionTree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> DecisionTreeNode</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> Value;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">short</span> FeatureIndex;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span> TrueBranch;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span> FalseBranch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTreeNode[] nodes; <span class="comment">// set in the constructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTreeNode root; <span class="comment">// set in the constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Evaluate</span>(<span class="params"><span class="keyword">double</span>[] features</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> node = root;</span><br><span class="line">        <span class="keyword">while</span>(node.FeatureIndex != <span class="number">-1</span>) <span class="comment">// LeafIndex = -1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nodeIndex = features[node.FeatureIndex] &lt; node.Value ? node.TrueBranch : node.FalseBranch;</span><br><span class="line">            node = nodes[nodeIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">RandomForest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTree[] trees; <span class="comment">// set in the constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">EvaluateProbability</span>(<span class="params"><span class="keyword">double</span>[] instance</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trees.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += trees[i].Evaluate(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>f / (<span class="number">1</span>f + Math.Exp(-sum)); <span class="comment">// conversion to probability</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Looking at the differences, even I'm amazed at the performance difference this code has compared to where we started at the top.  We did not have to modify our approach at all, we just had to take advantage of some knowledge about what was happening under the hood.</p><p>Hopefully you'll start to recognize these common patterns in your own work and you'll remember this blog post.  Showing up to your cadence meeting and presenting a 63% performance improvement on something that runs hundreds of times per second is always a fun experience.</p><h3>What's next?</h3><p>When you run out of common patterns to exploit, it's time to start pulling out the tools to help you identify the slow parts.  Next time we'll run through some tools which helped us identify the remaining bottlenecks in our code.</p><p>If you are interested in following along and trying this stuff out for yourself, please clone <a href="https://github.com/culture-of-development/random-forest-perf-blog" target="_blank" rel="noopener">the repo</a> and run the naive tests as shown in the readme.</p><hr><h3>How we sped up random forest process series</h3><ul><li><a href="/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/">Getting the lay of the land</a></li><li><a href="/blog/how-we-sped-up-random-forest-processing-lots-of-common-performance-patterns/">Lots of common performance patterns</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In &lt;a href=&quot;/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/&quot;&gt;the previous article&lt;/a&gt; we outlined our problem,
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>S0051 - AI &amp; Chatting - Blogging: random forest intro post draft</title>
    <link href="http://culture-of-development.com/streams/s0051-ai-chatting-blogging-random-forest-intro-post-draft/"/>
    <id>http://culture-of-development.com/streams/s0051-ai-chatting-blogging-random-forest-intro-post-draft/</id>
    <published>2019-06-13T01:55:22.000Z</published>
    <updated>2019-07-06T01:09:18.750Z</updated>
    
    <content type="html"><![CDATA[<p>For the first few minutes of this episode we wrapped up our notes from last time, then we moved straight into working on the introduction post.</p><p>Recently I've been listing to the book <a href="https://amzn.to/2Xlr4QN" target="_blank" rel="noopener">Story Worthy</a> on Audible.  It's all about how to tell stories that are engaging and meaningful and now I'm trying to apply some of those concepts to my writing.  As you watch me write these following blog posts, try to notice when I use the topics from this book and catch me on stream to help write better stories!</p><p>In this video I get a lot of help from <a href="https://twitter.com/hugodahl" target="_blank" rel="noopener">Hugo Dahl</a> on how to organize my thoughts and create visuals that aid the story.  I got so much help I happily added him as an author and I'm glad he was happy to oblige.</p><p>In this blog post we cover the initial attempt, which is some pretty typical and expressive code for this particular problem.  We do some initial benchmarking and notice it's pretty damn slow, so we set up some requirements we must adhere to in order to get this solution to a production state.</p><p>EDIT: <a href="/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/">the blog post is live</a>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For the first few minutes of this episode we wrapped up our notes from last time, then we moved straight into working on the introduction
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>How we sped up random forest processing, getting the lay of the land</title>
    <link href="http://culture-of-development.com/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/"/>
    <id>http://culture-of-development.com/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/</id>
    <published>2019-06-12T16:38:41.000Z</published>
    <updated>2019-06-28T03:15:25.949Z</updated>
    
    <content type="html"><![CDATA[<p>I work on the team at <a href="https://stackoverflow.com" target="_blank" rel="noopener">stackoverflow.com</a> that is responsible for job ad selection model.  These things:</p><p><img src="/img/so-job-ads.PNG" alt="Stack Overflow Job Ads"></p><p>This model predicts the likelihood that a user will click on a given job relative to all the other jobs.  At any given time there are a bunch of jobs on the job board that the current visitor can see, so we calculate the expectation for each job, then we perform a weighted random selection over those values.</p><p>The problem we have is that the model needs to be updated from time to time to account for changing market conditions.  Basically, new technologies come out all the time and which kinds of technologies are being used on Stack Overflow changes over time and which kinds of jobs are being listed changes all the time.</p><p>In this most recent round of updating the model, we decided to go outside of our typical process of using a <a href="https://en.wikipedia.org/wiki/Lasso_(statistics)" target="_blank" rel="noopener">lasso regression</a> and instead decided to try out numerous kinds of other models.  At the end of the day, the best model based on our selection criteria turned out to be a <a href="https://en.wikipedia.org/wiki/Random_forest" target="_blank" rel="noopener">random forest</a>.  A random forest is basically a collection of decision trees that all combine to make a prediction.</p><p>You may have heard of decision trees because they are the brunt of one of the biggest jokes in all of AI.</p><p><img src="/img/scooby_doo_ai.jpg" alt="Decision Trees unmasked!"></p><h6>image source: <a href="https://9gag.com/gag/aeMmnPW/if-advanced-ai-was-a-scooby-doo-villain" target="_blank" rel="noopener">9gag.com</a></h6><p>But it turns out they are quite powerful after all, especially when you use a lot of them together, like a random forest.  I tend to get a little upset when I see that meme because the interesting part isn't really how they make the predictions, it's in how they are constructed, which is legitimate ML.</p><p>Training a random forest can be quite expensive however, and we were not able to feed it all of our sample data.  Instead it was decided to try a similar model, <a href="https://xgboost.readthedocs.io/en/latest/" target="_blank" rel="noopener">XGBoost</a> which we could feed with much more data in the same amount of time.  This is trained in a totally different manner, i.e. using <a href="https://en.wikipedia.org/wiki/Boosting_(machine_learning)" target="_blank" rel="noopener">boosting</a>, however on the prediction side it turns out to be almost exactly the same as a random forest.</p><p>So we have a new model, we hope it's going to be good, now we need to run a test which means we need to get this thing into a API that can be called from our ad server.</p><h3>Try the easiest thing first</h3><p>One problem we have had here is that most of our models are trained in the <a href="https://www.r-project.org/about.html" target="_blank" rel="noopener">R language</a> and then we have to convert to those models to run in C# which is what we use for pretty much all production stuff here at Stack Overflow.</p><p>It has been on our radar for a long time to try to run R in production so we can avoid the step of transfering the model to a new system.  There has been more than one major mistake on account of that transfer and it would also reduce our time to push out new models once we get them from our data scientist.</p><p>So we tried it.  And then we were like, okay, let's see how fast it is.</p><p><img src="/img/xgboost-api-time-r.png" alt="R API times"></p><h6>image source: <a href="https://twitter.com/juliasilge" target="_blank" rel="noopener">Julia Silge</a></h6><p>That's... ummm, not fast.  That's about a 25 millisecond average time to score a <em>single</em> job.  But wait, we have a lot of jobs on the job board at any time.</p><p><img src="/img/num-jobs-on-the-board.PNG" alt="Number of jobs on Stack Overflow right now"></p><p>That's how many you can see right now if you live in the United States and you can see how many jobs are available in your area right now by visiting <a href="https://stackoverflow.com/jobs" target="_blank" rel="noopener">stackoverflow.com/jobs</a>.  And if we multiply that with the time it takes to score one job on average, we're looking at <code>3810 * 25ms = 95,250ms</code>.  That's a lot of ms to render a job ad.  Too many in fact.  I guess we need to take a look at our overall requirements.</p><h3>The requirements</h3><p>First off, the number of jobs fluctuates from time to time due to various marketing and syndication efforts, as well as the general seasonal fluctuations.  We need to build in some buffer here, so let's say this needs to work for 5,000 jobs, and of course the more the merrier.</p><p><img src="/img/ad-request-time.PNG" alt="Job Ad Request Engine times"></p><p>Looking at our current ad request times, it looks like the entire job selection process takes about 25 ms on average and roughly 65-70 ms for the 99th percentile.  That's to do all the scoring and choosing of the jobs based on those scores.  I'm not entirely sure how much of that time is the job selection process, but we should give ourselves some buffer here and let's just call it 25 ms to match what we have and we need to keep the 99th percentile under 65 ms.</p><p>This application runs on our web tier, the exact same boxes that Stack Overflow and all the other Stack Exchange sites run on.  These boxes are getting slammed like crazy with requests.  On our web tier, pretty much anything in the path of a request needs to be handled in a single-threaded manner.  In order to test out something that operates in parallel would be a test all of it's own and is beyond the scope of this project.</p><p>We also need to be aware of the memory usage for this application.  The request handling needs to allocate as little memory as possible but there is some leeway here because the boxes themselves run at about 80% memory capacity already.  There are 64 GB of RAM on each of these boxes, and we need to keep some buffer in there, so going to the architecture team to ask for more than a couple gigabytes on each of these boxes is a pretty big ask.  Whatever memory it takes to run a single request, we really need to multiply it times 48 because there are 48 cores on the box.  If we want to stay under say 3 GB, then we have at most 62.5 MB per request.</p><p>And lastly, we really only care about making this specific model fast enough to run the test.  It is not necessary to build a general purpose random forest implementation here, just something that can test the model we were given so we can verify if it is an improvement over our old model or not.  It is totally fine to make concessions as necessary to support only this one instance, and if this model turns out to be better than what we currently have, <em>then</em> we might consider generalizing it to support a wider range of model instances.</p><p>So in short, the requirements for handling a single request are:</p><ul><li>must score 5,000 jobs for a user</li><li>must complete in roughly 25 ms, and 99% of requests need to finish in under 65 ms</li><li>must be single-threaded</li><li>must use less than roughly 65 MB total</li><li>all tricks are allowed as long as <em>this one model instance</em> works correctly</li></ul><h3>Let's stick to our bread and butter</h3><p>We're much better at C# here than we are at R for performance critical applications.  Additionally the most important thing to do right now is to verify that this new model is an improvement over the old model so building out a pipeline that included R in production was probably a lot of additional work we didn't need to consider doing for this anyway.</p><p>So we decided to write this in C# and we went with the most naive possible solution.  Pretty much all the code to run the XGBoost model looks like this:</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DecisionTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecisionTreeNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> FeatureIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> TrueBranch &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> FalseBranch &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> LeafIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTreeNode[] nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecisionTree</span>(<span class="params">DecisionTreeNode[] tree</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        nodes = tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Evaluate</span>(<span class="params"><span class="keyword">double</span>[] features</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> node = nodes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(node.FeatureIndex != LeafIndex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nodeIndex = features[node.FeatureIndex] &lt; node.Value ? node.TrueBranch : node.FalseBranch;</span><br><span class="line">            node = nodes[nodeIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">RandomForest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DecisionTree[] trees;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomForest</span>(<span class="params">DecisionTree[] trees</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.trees = trees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">EvaluateProbability</span>(<span class="params"><span class="keyword">double</span>[] instance</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = trees.Sum(t =&gt; t.Evaluate(instance));</span><br><span class="line">        <span class="keyword">var</span> result = Logit(sum);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this converts the output to a probability</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">Logit</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>f / (<span class="number">1</span>f + Math.Exp(-<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>That's basically all the work part of it.  I left off the parsing code because it's not particularly important but so you are aware of what the actual output from the XGBoost model in R looks like, here's a snippet:</p><p><pre>booster[0]0:[f0&lt;0.99992311] yes=1,no=2,missing=1,gain=97812.25,cover=2189861:leaf=-0.199992761,cover=27584.752:[f17&lt;0.000367681001] yes=3,no=4,missing=3,gain=10373.0732,cover=191401.253:[f2&lt;0.5] yes=5,no=6,missing=5,gain=4121.85938,cover=103511.55:[f6&lt;0.00216802233] yes=9,no=10,missing=9,gain=873.340759,cover=50533.259:[f732&lt;0.5] yes=17,no=18,missing=17,gain=515.368896,cover=33356.7517:leaf=-0.00213295687,cover=25503.518:leaf=-0.0314288437,cover=7853.2510:[f732&lt;0.5] yes=19,no=20,missing=19,gain=276.522034,cover=17176.519:leaf=0.0253729131,cover=1347420:leaf=-0.00548130181,cover=3702.56:[f734&lt;0.237819463] yes=11,no=12,missing=11,gain=2141.23145,cover=52978.2511:[f8&lt;0.00104575348] yes=21,no=22,missing=21,gain=566.334961,cover=3568921:leaf=-0.0620479584,cover=24457.522:leaf=-0.0349165387,cover=11231.512:[f762&lt;0.308019817] yes=23,no=24,missing=23,gain=483.886719,cover=17289.2523:leaf=-0.0144120604,cover=16450.524:leaf=0.063411735,cover=838.754:[f2&lt;0.5] yes=7,no=8,missing=7,gain=2694.23291,cover=87889.757:[f27&lt;0.000739371637] yes=13,no=14,missing=13,gain=928.447266,cover=44100.513:[f732&lt;0.5] yes=25,no=26,missing=25,gain=285.069702,cover=17082.2525:leaf=0.032621529,cover=13427.2526:leaf=0.00112144416,cover=365514:[f285&lt;0.000919258455] yes=27,no=28,missing=27,gain=421.745117,cover=27018.2527:leaf=0.0483669229,cover=2014528:leaf=0.077062957,cover=6873.258:[f734&lt;0.103942066] yes=15,no=16,missing=15,gain=1591.2124,cover=43789.2515:[f101&lt;0.000240761583] yes=29,no=30,missing=29,gain=608.92157,cover=24192.7529:leaf=-0.0209285971,cover=14574.7530:leaf=0.0114876805,cover=961816:[f722&lt;0.5] yes=31,no=32,missing=31,gain=601.422363,cover=19596.531:leaf=0.0258833747,cover=18429.7532:leaf=0.099892959,cover=1166.75booster[1]0:[f0&lt;0.99992311] yes=1,no=2,missing=1,gain=80168.1719,cover=218645.7341:leaf=-0.181867003,cover=27310.752:[f17&lt;0.000390548841] yes=3,no=4,missing=3,gain=8405.98535,cover=191334.9843:[f2&lt;0.5] yes=5,no=6,missing=5,gain=3338.54272,cover=103498.185:[f5&lt;0.000531250262] yes=9,no=10,missing=9,gain=750.746765,cover=50538.32819:[f732&lt;0.5] yes=17,no=18,missing=17,gain=355.950684,cover=32388.95917:leaf=-0.00289925188,cover=24663.103518:leaf=-0.0274959896,cover=7725.8544910:[f732&lt;0.5] yes=19,no=20,missing=19,gain=279.289886,cover=18149.371119:leaf=0.0230532587,cover=14319.193420:leaf=-0.00734602008,cover=3830.177496:[f734&lt;0.237819463] yes=11,no=12,missing=11,gain=1736.53467,cover=52959.851611:[f5&lt;0.000720986514] yes=21,no=22,missing=21,gain=514.774414,cover=35668.050821:leaf=-0.0571310222,cover=22939.169922:leaf=-0.0320498347,cover=12728.879912:[f722&lt;0.5] yes=23,no=24,missing=23,gain=468.159485,cover=17291.802723:leaf=-0.0137320729,cover=16250.607424:leaf=0.0554070361,cover=1041.194824:[f2&lt;0.5] yes=7,no=8,missing=7,gain=2186.99561,cover=87836.80477:[f27&lt;0.000739371637] yes=13,no=14,missing=13,gain=755.193359,cover=44065.710913:[f668&lt;0.5] yes=25,no=26,missing=25,gain=245.545715,cover=17078.177725:leaf=0.0203356724,cover=16096.405326:leaf=0.0718296021,cover=981.77209514:[f58&lt;0.000670915877] yes=27,no=28,missing=27,gain=312.375,cover=26987.535227:leaf=0.0368296206,cover=10639.085928:leaf=0.0588531196,cover=16348.44828:[f734&lt;0.237819463] yes=15,no=16,missing=15,gain=1328.46338,cover=43771.097715:[f27&lt;0.000467836275] yes=29,no=30,missing=29,gain=631.899902,cover=28666.847729:leaf=-0.0222451035,cover=11761.16830:leaf=0.00793752726,cover=16905.679716:[f722&lt;0.5] yes=31,no=32,missing=31,gain=362.48999,cover=15104.24831:leaf=0.0279367212,cover=14043.147532:leaf=0.0885346606,cover=1061.10071</pre></p><p>This snippet shows two trees, delimited by the lines that start with <code>booster[</code> and there are 1,000 of these trees.  Due to the way this model was trained, the missing branch, which you would normally take when a feature is missing from the sample, is always the &quot;no&quot; branch.  This is because we replace all values with 0 if they are missing, and all features have a positive value in our problem space.  The gain and cover variables are just output from the model for your information but do not affect the tree at all.  The first number is the index of the line that is referred to by the &quot;yes&quot; and &quot;no&quot; parameters.  The features are numbered 0 through about 840 in our data, so when you see <code>fXXX</code> it means feature number XXX in the input.  The input to these, as you can see from the <code>Evaluate</code> function is just an array of doubles.</p><h3>How close are we?</h3><p>Let's try it out real fast, and see.  This is just using a simple timer wrapped around running this code with 5000 examples.  One caveat here, make sure you run this in release mode or your times will be wildly different.</p><blockquote><p>[6/20/19 4:02:34 AM] Time taken for 5000 evaluations: 319.5548 ms</p></blockquote><p>Hey that's not so bad, only a factor of about 12-13 to go.  I should point out here that when you're trying to reach a specific performance goal, the actual machine you're going to be running this on makes a difference.  My dev box gets an update about every other year, and is much more powerful than a lot of our production servers, especially the ones this will be running on.  In fact if you run this on processors released in the last year or two, you might see times as low as 220 ms, like I did on my laptop which only 4 months old. [obligatory works-on-my-machine badge here]  In an ideal world, we would run this test on the machine we care about, but since we're so far from meeting our requirements already, it's not time for that yet.</p><p>But wait up, let's not get ahead of ourselves, let's verify this is actually generating the correct values too.  Keep in mind that there are a bunch of samples here that we used for the timing that we can now use to verify it is spitting out the correct values.  These samples, and the expected outputs, were provided to us by our data scientist.</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RandomForest model; <span class="comment">// loaded in test setup</span></span><br><span class="line"><span class="keyword">double</span>[][] samples; <span class="comment">// loaded in test setup</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> probablity_feature_index = <span class="number">840</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> sample <span class="keyword">in</span> samples)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = model.EvaluateProbability(sample);</span><br><span class="line">    <span class="keyword">var</span> expected = sample[probablity_feature_index];</span><br><span class="line">    Assert.InRange(actual, expected - <span class="number">1e-06</span>, expected + <span class="number">1e-06</span>);</span><br><span class="line">&#125;</span><br><span class="line">output.WriteLine(<span class="string">"Correctness verified."</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>[6/20/19 4:02:34 AM] Correctness verified.</p></blockquote><p>So \o/ we're on the right track!</p><p>Let's also take a second to realize that the biggest win we're going to see here at all is that moving away from the tooling we are not familiar with, i.e. the R API described above, to something we are much better with.  We were able to reduce the time for a single sample evaluation from roughly 25 ms to roughly 0.047 ms which is roughly three orders of magnitutude.  I want to be clear, this is not because <em>R</em> is slow, it's because <em>we</em> are not familiar enough with R to write efficient code.  The rest of this entire series is about grinding out as much of that last order of magnitude as possible.</p><h3>What's next?</h3><p>Next time we're going to take a look at some really basic improvements which will net us a fair amount of win.  The first step for designing anything is to get it working correctly and set a baseline for performance.  These next few things we address will be very common tips that can show some major improvements in your applications with only minor changes.</p><p>If you are interested in following along and trying this stuff out for yourself, please clone <a href="https://github.com/culture-of-development/random-forest-perf-blog" target="_blank" rel="noopener">the repo</a> and run the naive tests as shown in the readme.</p><hr><h3>How we sped up random forest process series</h3><ul><li><a href="/blog/how-we-sped-up-random-forest-processing-getting-the-lay-of-the-land/">Getting the lay of the land</a></li><li><a href="/blog/how-we-sped-up-random-forest-processing-lots-of-common-performance-patterns/">Lots of common performance patterns</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I work on the team at &lt;a href=&quot;https://stackoverflow.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stackoverflow.com&lt;/a&gt; that is responsible for jo
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>S0050 - Mentorship Monday - How to study</title>
    <link href="http://culture-of-development.com/streams/s0050-mentorship-monday-how-to-study/"/>
    <id>http://culture-of-development.com/streams/s0050-mentorship-monday-how-to-study/</id>
    <published>2019-06-11T01:55:21.000Z</published>
    <updated>2019-07-06T01:09:18.749Z</updated>
    
    <content type="html"><![CDATA[<p>One of the questions I get asked most often when doing mentorship is &quot;how do you study for a test&quot;.  This episode answers that question including things like &quot;predict the future&quot; and &quot;take naps as often as your cats do&quot;.  No really, do those things, it'll help.  This is a short one so best to just watch it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of the questions I get asked most often when doing mentorship is &amp;quot;how do you study for a test&amp;quot;.  This episode answers that 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0049 - AI &amp; Chatting - Blogging: random forest series notes</title>
    <link href="http://culture-of-development.com/streams/s0049-ai-chatting-blogging-random-forest-series-notes/"/>
    <id>http://culture-of-development.com/streams/s0049-ai-chatting-blogging-random-forest-series-notes/</id>
    <published>2019-06-07T01:38:16.000Z</published>
    <updated>2019-07-06T01:09:18.748Z</updated>
    
    <content type="html"><![CDATA[<p>We just spent almost three weeks learning a ton about how to optimize random forests for performance.  We used a lot of tools and learned a lot.  We made a bunch of predictions about what was going on and we were wrong a lot, our expectations were way off and did I mention we learned a lot?  We should blog about that and tell people what's up.</p><p>I'm happy to share my process for writing blog posts in this stream and the chatting was a lot of fun as well.</p><p>Here's what we came up with.  This is way too long for a single blog post so we're gonna make this a series.</p><hr><h2>introduction</h2><ul><li>the goal for the whole project<ul><li>describe the project, show where on the page it is being used</li><li>describe what we currently have and why it's not keeping up with the times</li><li>we need to test it</li></ul></li><li>we tried to most simple thing first<ul><li>keep the model in the language it was developed in</li><li>that was attrocious</li><li>yea that's not gonna work</li></ul></li><li>the requirements for the whole project<ul><li>our goal is not to make a general purpose tool, but make this specific case as fast as possible</li><li>5000 jobs</li><li>99th % at like 85 ms, realistically it's more like 50 ms</li><li>must be single threaded, it's running on the same boxes as everything else that is publicly web facing</li><li>soft requirement on how much memory it can use, just needs to be as little as possible</li></ul></li></ul><h2>getting it up and running</h2><ul><li>switch to c# land<ul><li>parsing the provided model files</li><li>the most naive possible solution<ul><li>show all the necessary code in a snippet</li></ul></li><li>verifying correctness</li></ul></li></ul><h2>performance tuning</h2><h3>the trivial stuff</h3><ul><li>get rid of linq</li><li>using structs instead of classes for nodes</li><li>shrinking the representation</li><li>putting class fields in the best order</li><li>getting fast access to the first node</li></ul><h3>finding out the real (i.e. actual) slow parts</h3><ul><li>get some ideas, like where we think it's slow</li><li>verify those ideas</li><li>do some profiling (simple timers)</li><li>some crazier profiling (visual studio profiler, dotTrace)</li><li>some insane profiling (vtune)</li><li>problems with all these methods</li></ul><h2>the overall problem</h2><ul><li>cache pressure</li><li>how did we decide it was cache pressure?</li></ul><h2>general approaches to fixing it</h2><ul><li>reduce the memory size (hey we already did that once!)</li><li>reduce the working set size</li><li>access data in predictable patterns</li></ul><h2>changes to the decision trees</h2><ul><li>remember we're just trying to solve our specific use case, not general purpose trees</li></ul><h3>approach: reorder the features</h3><ul><li><p>idea is that the features jump all over the place, if we put commonly accessed features close to each other, it should greatly reduce the number of cache pages that we need</p></li><li><p>took the greedy approach</p></li><li><p>describe the evaluation function</p></li><li><p>To parallel comparing sorting/searching algorithms. Introduce it, explain it, show it, why would it work/not work for this scenario : @theHugoDahl</p></li></ul><h3>approach: evaluate all samples for 1 tree at a time</h3><ul><li>take a step back and look at the whole problem, not just optimize the thing the profiler said was slow, but focus on the whole problem</li><li>there were 2 places we loaded from memory, 1 was features, other was jobs, so this is the next likely approach</li><li>also the trees are quite heavy and churning through all that data is expensive, so we should reduce the churn</li><li>guess what it's wayyy faster!</li></ul><h3>approach: compiled trees</h3><ul><li>there is always an extra branch at the end, can we eliminate the extra branch?</li><li>let's code gen a function for each tree to reduce it as much as possible</li><li>this was insanely fast</li><li>guess what it's also got a huge bug<ul><li>the bug that pretty clearly identified it as cache pressure though which really narrowed down the future ideas</li></ul></li></ul><h3>approach: better memory alignment for the trees</h3><ul><li>the trees were stored in objects that were spread out in memory</li><li>what if we put them all close together?</li><li>array of structs to struct of arrays</li><li>can we also get rid of the indexes for the branches because that would eliminate some lookup and shrink the size even more</li><li>this was an actual win</li></ul><h3>approach: is precomputing possible?</h3><ul><li>this is something we had been thinking about all along</li><li>but we tried repeatedly to precompute the jobs, only because these are branches, you now have to create a set of trees for each job which is an asinine amount of memory usage which is beyond our allowance</li><li>instead let's take <em>another</em> step back and look at the whole test, compared to what's going to happen in production</li><li>there's only 1 user, so we can precompute the user then run it for all jobs</li><li>this was another huge win</li></ul><h2>getting ready for production</h2><ul><li>making the decision which algorithm to choose</li><li>eliminating allocations</li><li>reducing memory churn as much as possible</li><li>making a test that more closely mimics production use</li><li>cleaning up the code for readability and documentation</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We just spent almost three weeks learning a ton about how to optimize random forests for performance.  We used a lot of tools and learned
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0048 - AI &amp; Chatting - Decision trees: prepping for production</title>
    <link href="http://culture-of-development.com/streams/s0048-ai-chatting-decision-trees-prepping-for-production/"/>
    <id>http://culture-of-development.com/streams/s0048-ai-chatting-decision-trees-prepping-for-production/</id>
    <published>2019-06-04T21:44:33.000Z</published>
    <updated>2019-06-06T16:45:34.397Z</updated>
    
    <content type="html"><![CDATA[<p>Right after the stream yesterday I finished up the code to generate the compiled trees and wowee are they fast.  10,000 job/user combinations in ~25 ms.  That's finally within our requirements!  Now it's time to clean this up a bit in preparation for production.</p><p>Things we take a look at:</p><ul><li>eliminating essentially all allocations</li><li>reducing memory churn as much as possible</li><li>making a test that more closely mimics production use</li><li>cleaning up the code for readability</li></ul><p>I would also like to give a huge thanks to <a href="https://www.twitch.tv/csharpfritz" target="_blank" rel="noopener">@csharpfritz</a> for the amazing 70+ person raid!  This helped me blow through a few achievements and gave me a good audience to recap the last 2 weeks of work on this project.  Also another huge shout out to everyone who participating in the bit war, especially <a href="https://www.twitch.tv/themichaeljolley" target="_blank" rel="noopener">@theMichaelJolley</a> and <a href="https://www.twitch.tv/cpayette" target="_blank" rel="noopener">@cpayette</a>!  Thanks everyone!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Right after the stream yesterday I finished up the code to generate the compiled trees and wowee are they fast.  10,000 job/user combinat
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0047 - AI &amp; Chatting - Decision trees: compiled trees</title>
    <link href="http://culture-of-development.com/streams/s0047-ai-chatting-decision-trees-compiled-trees/"/>
    <id>http://culture-of-development.com/streams/s0047-ai-chatting-decision-trees-compiled-trees/</id>
    <published>2019-06-04T20:43:39.000Z</published>
    <updated>2019-06-06T16:45:34.397Z</updated>
    
    <content type="html"><![CDATA[<p>Well after all that work on optimizing for fewest pages touched, turns out it didn't help any noticable amount.  Completely... deflating.</p><p>Of course we're not out of ideas yet, far from it in fact.  TheHugeDahl was extremely thoughtful during the last stream and noted that we could make some changes to the organization of the trees.  One improvement in particular was moving the leaf values up to the parents.  If we can move the leaves to the parents we save a branch of every single tree which should add up to some savings.  But... why not take it one step further.  Lets try code generating functions for each tree and just calling those functions directly.</p><p>Ideally this would have a lot of positive effects:</p><ul><li>it would eliminate the heavyweight trees altogether</li><li>it would eliminate a lot of data cache contention by moving the trees to instruction cache</li><li>and of course we could eliminate those last branches in each path</li></ul><p>One caveat, I have never written code gen using .NET before, so we're going to have to figure that out and luckily there's a library called <a href="https://github.com/kevin-montrose/Sigil" target="_blank" rel="noopener">sigil</a> to help us out.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Well after all that work on optimizing for fewest pages touched, turns out it didn&#39;t help any noticable amount.  Completely... deflating.
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0046 - AI &amp; Chatting - Decision trees how low can you go?</title>
    <link href="http://culture-of-development.com/streams/s0046-ai-chatting-decision-trees-how-low-can-you-go/"/>
    <id>http://culture-of-development.com/streams/s0046-ai-chatting-decision-trees-how-low-can-you-go/</id>
    <published>2019-06-04T12:31:06.000Z</published>
    <updated>2019-06-06T16:45:34.396Z</updated>
    
    <content type="html"><![CDATA[<p>Last week we used performance tooling like dotTrace and Intel Vtune to show that the majority of the time our code takes is in fact memory loading issues.  Since memory is broken into pages, we take a look at exploring how many pages are being traversed while loading the features and see for a weighted pass through any tree, we're touching roughly 4 pages of memory.  If we can lower this by even 50%, then this should make a dent in overall runtime.</p><p>Our approach for this episode is to build a greedy optimization tool to see how low we can get the average number of features memory pages per tree down to.  At the end we make some predictions, all of which turn out to be wayyyyy off.  Off stream I made some minor adjustments to the evaluation function and overall we were able to find an ordering of features which reduces the average number of pages hit from roughly 4.3 per sample per tree to around 2.8 per sample per tree.  Since there are 1,000 trees and 5,000 samples, that's roughly a ton of work saved.  At least that's the expectation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last week we used performance tooling like dotTrace and Intel Vtune to show that the majority of the time our code takes is in fact memor
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0045 - AI &amp; Chatting - Decision Trees performance improvements</title>
    <link href="http://culture-of-development.com/streams/s0045-ai-chatting-decision-trees-performance-improvements/"/>
    <id>http://culture-of-development.com/streams/s0045-ai-chatting-decision-trees-performance-improvements/</id>
    <published>2019-05-24T13:13:48.000Z</published>
    <updated>2019-05-26T13:13:59.346Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0044 - AI &amp; Chatting - XGBoost code</title>
    <link href="http://culture-of-development.com/streams/s0044-ai-chatting-xgboost-code/"/>
    <id>http://culture-of-development.com/streams/s0044-ai-chatting-xgboost-code/</id>
    <published>2019-05-23T13:13:10.000Z</published>
    <updated>2019-05-26T13:13:24.112Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0043 - AI &amp; Chatting - Decision Trees code</title>
    <link href="http://culture-of-development.com/streams/s0043-ai-chatting-decision-trees-code/"/>
    <id>http://culture-of-development.com/streams/s0043-ai-chatting-decision-trees-code/</id>
    <published>2019-05-22T13:12:28.000Z</published>
    <updated>2019-06-06T16:45:34.395Z</updated>
    
    <content type="html"><![CDATA[<p>For the next couple weeks we get to work on stuff for my primary job!  Essentially we have come up with a new model for estimating the click likelihood of job ad on Stack Overflow.  The model was trained up using the <a href="https://xgboost.readthedocs.io/en/latest/" target="_blank" rel="noopener">XGBoost</a> R package.  It is a boosting method over the top of decision trees.  On the prediction side this model acts exactly like a random forest, i.e. a bunch of decision trees that all vote on the correct answer, which in this case is whether or not the person will click on this job.  The only difference is that instead of doing it as a classification problem, it instead works more like a regression problem, calculating a probability as the output instead of a binary yes/no answer.</p><p>Initially we decided to try making an API in R to support this model which saves us the trouble of converting the model to another language and dealing with bugs along the way.  After some quick testing we realized that was going to be wayyyyyy to slow, like 10-100 ms <em>per job prediction</em>!  There are thousands of jobs that have to be predicted on each request, so this is definitely not going to work.</p><p>Our task is this:</p><ul><li>perform 5,000 prections</li><li>complete all predictions in roughly 50 ms</li><li>do all these computations on a single processor core</li><li>use a reasonable amount of memory</li></ul><p>The last two requirements are based off the fact that this is going to be running on shared hardware and screwing this up can have serious consequences for the entire network.  If you're doing the math in your head, this is about a 2,500 times speed up we need to achieve, so this ought to be fun.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For the next couple weeks we get to work on stuff for my primary job!  Essentially we have come up with a new model for estimating the cl
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0042 - Mentorship Monday! cover letters and psuedopolynomial</title>
    <link href="http://culture-of-development.com/streams/s0042-mentorship-monday-cover-letters-and-psuedopolynomial/"/>
    <id>http://culture-of-development.com/streams/s0042-mentorship-monday-cover-letters-and-psuedopolynomial/</id>
    <published>2019-05-20T13:11:28.000Z</published>
    <updated>2019-05-27T01:06:26.160Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Mentorship Monday!  This is my new spot for answering <strong>your</strong> questions about what it's like to be a professional developer.  I'm happy to help you with whatever it is you are having trouble with, from technical to organizational, to personal, just tweet me a question and I'll be happy to add your question to the list for the next episode!  Reach me at <a href="https://twitter.com/fody" target="_blank" rel="noopener">fody on twitter</a>.</p><p>This week we covered 2 questions I get asked a ton:</p><ul><li>What does a good cover letter look like?</li><li>I don't get algorithmic complexity, what am I missing?</li></ul><p>My answer to the cover letter stuff is pretty cut and dry at this point because I have written the best way to write a cover letter a few years back (<a href="/blog/the-developer-cover-letter/" title="The Developer Cover Letter">The Developer Cover Letter</a>) and nothing has really changed since then.</p><p>For the algorithmic complexity question I noted that if you think the input size is how many elements there are in some data structure, then you probably have it all wrong, and the correct way to think about it is the number of bits in the input.  The explanation goes on to show that all known solutions to the Fibonnaci number problem are actually exponential time solutions and not linear!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to Mentorship Monday!  This is my new spot for answering &lt;strong&gt;your&lt;/strong&gt; questions about what it&#39;s like to be a professiona
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0041 - Updating Stream Theme - making a list of what needs to be done</title>
    <link href="http://culture-of-development.com/streams/s0041-updating-stream-theme-making-a-list-of-what-needs-to-be-done/"/>
    <id>http://culture-of-development.com/streams/s0041-updating-stream-theme-making-a-list-of-what-needs-to-be-done/</id>
    <published>2019-05-15T13:09:36.000Z</published>
    <updated>2019-05-27T00:46:37.515Z</updated>
    
    <content type="html"><![CDATA[<p>Time to up the production value of the stream a bit!  Here's the quick list of things we came up with to improve upon and we'll spend the next few days grinding through as much as we can before it's time to get back to doing some AI and stuff.</p><ul><li>colors:<ul><li>right brain: F2531B</li><li>left brain: 797A7B</li><li>background: 405156</li></ul></li><li>make a new background for all scenes for consistency</li><li>add in some background noise<ul><li>hopefully this only goes to stream, not to me</li><li>consider adaptive background that get louder when im quiet for an extended period</li></ul></li><li>UI<ul><li>last follower</li><li>last subscriber</li><li>cover more of the screen</li><li>keep the chat overlay or not, if yes then make it much easier to read</li></ul></li><li>transitions for scene to scene (not entirely sure what i want here)</li><li>scenes within scenes? (do some research)</li><li>new scenes<ul><li>interview scene with no code (just talking) 2 people</li><li>interview scene with no code (just talking) 3 people</li><li>Mentorship Monday, that's easier to modify</li><li>whiteboard</li></ul></li><li>chat<ul><li>get a chat bot</li></ul></li><li>video<ul><li>lighting</li><li>zooming</li><li>size</li><li>look at chat?</li></ul></li><li>new interactions<ul><li>raids happen</li><li>subscriptions</li><li>etc</li><li>left brain, right brain theme</li></ul></li><li>flip the logo horizontally to make the brains seem more correct<ul><li>update the website with the updated logo</li></ul></li><li>including some stream plugins<ul><li>amazon prime</li><li>closed captioning</li></ul></li></ul><h3>What did we accomplish today?</h3><ul><li>colors:<ul><li>right brain: F2531B</li><li>left brain: 797A7B</li><li>background: 405156</li></ul></li><li>including some stream plugins<ul><li>amazon prime</li><li>closed captioning</li></ul></li><li>video<ul><li>zooming</li><li>lighting</li><li>size</li><li>look at chat?</li></ul></li><li>UI<ul><li>cover more of the screen</li><li>keep the chat overlay or not, if yes then make it much easier to read</li></ul></li></ul><p>Quite the day, and now that we're all done, things already look better.  The hidden bottom bar and the color scheme went a long way toward cleaning things up and the logo behind the video was a nice touch.</p><p>Tomorrow we definitely want to look into nested scenes and see if we can get a lot of the video stuff taken care of so we can spend most of Friday getting a customizable chat bot rolling.  Thanks to everyone who joined and I look forward to see you all tomorrow!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Time to up the production value of the stream a bit!  Here&#39;s the quick list of things we came up with to improve upon and we&#39;ll spend the
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0040 - Mentorship Monday!</title>
    <link href="http://culture-of-development.com/streams/s0040-mentorship-monday/"/>
    <id>http://culture-of-development.com/streams/s0040-mentorship-monday/</id>
    <published>2019-05-13T13:05:24.000Z</published>
    <updated>2019-05-27T01:07:02.375Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Mentorship Monday!  This is my new spot for answering <strong>your</strong> questions about what it's like to be a professional developer.  I'm happy to help you with whatever it is you are having trouble with, from technical to organizational, to personal, just tweet me a question and I'll be happy to add your question to the list for the next episode!  Reach me at <a href="https://twitter.com/fody" target="_blank" rel="noopener">fody on twitter</a>.</p><p>This week's episode we went over what mentorship is and how to know what kinds of questions are best for mentorship compared to things you might ask on stackoverflow.com or just looking up on google.  Short and sweet, please drop me a line and I'll be happy to get to your questions as soon as possible!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to Mentorship Monday!  This is my new spot for answering &lt;strong&gt;your&lt;/strong&gt; questions about what it&#39;s like to be a professiona
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0039 - js13k competition practice, part 12 of 12: finishing the build pipeline and compressing the audio</title>
    <link href="http://culture-of-development.com/streams/s0039-js13k-competition-practice-part-12-of-12-finishing-the-build-pipeline-and-compressing-the-audio/"/>
    <id>http://culture-of-development.com/streams/s0039-js13k-competition-practice-part-12-of-12-finishing-the-build-pipeline-and-compressing-the-audio/</id>
    <published>2019-05-10T13:20:01.000Z</published>
    <updated>2019-05-26T13:33:58.710Z</updated>
    
    <content type="html"><![CDATA[<p>I saved the most important requirement for this entire project for last, compressing everything into 13 kb.  That's why it's called JS13K after all.  I knew this was going to be difficult because of the audio.  I had looked at how many other competitors had implemented audio in the past and frankly it's still really complicated to me.  I decided to take the bail route and just record some sound effects when we reached that step to save some time.</p><p>For the first part of today I fixed up the build script that combines all the files into the correct folder, zips them up and then spits out the size.  This was a bit frustrating honestly because I rarely use the commandline and basically everything I expected to work did not succeed on the first try.  After looking at tons of documentation, Stack Overflow questions and a little help from chat, I finally got it performing all the necessary steps.  Where are we at?  Something like 230 kb.  A good bit off.</p><p>Next I took the bail route again on the audio.  I knew we didn't need the fully sampled audio, so I looked to audio compressors I could find online with the idea of compressing it until I couldn't stand the quality loss.  This was super powerful; after converting all my audio to 16k sample rate instead of the original 192k sample rate the size was down to just under 30 kb total.  Still not quite there, but at this point I'm out of time and this was as good as I was going to get.</p><p>At the end of the video I take some time to recount all the things I learned throughout this project as well as a bunch of stuff I want to try out before the next competition starts in August!  Look for a blog post on that soon.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I saved the most important requirement for this entire project for last, compressing everything into 13 kb.  That&#39;s why it&#39;s called JS13K
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0038 - js13k competition practice, part 11 of 12: constructing the world and camera control</title>
    <link href="http://culture-of-development.com/streams/s0038-js13k-competition-practice-part-11-of-12-constructing-the-world-and-camera-control/"/>
    <id>http://culture-of-development.com/streams/s0038-js13k-competition-practice-part-11-of-12-constructing-the-world-and-camera-control/</id>
    <published>2019-05-09T13:08:10.000Z</published>
    <updated>2019-05-26T13:33:43.317Z</updated>
    
    <content type="html"><![CDATA[<p>The first half of today was all about using the world data we loaded up yesterday and constructing the world from it.  This was almost an hour and a half straight of coding and you should see the expression on my face when it rendered on the first try after fixing one minor typo.</p><p>We identified quite a few bugs as we worked after this, e.g. there was some funkyness around walls not being blocking and we planned some game mechanics in the world editor that didn't actually exist in the game... wishful thinking I guess. :)  The world was also HUGE!  Definitely did not fit on the screen so we had to fix up some CSS to even find the player.  There were also some interaction bugs on account of not having exactly one of things like doors.  All doors try to check for a terminal state which clearly isn't correct in an office with lots of doors.</p><p>The other major project for today was the camera controller.  Since the world was so big, the camera needed to follow the player in some way so that we could always see the player.  We went with the most simple solution I could think of, just keep the player in the middle of the screen and move the world around the player.  This worked well enough to move on so we wrote down a bunch of quirks that still need to be ironed out and wrapped up.</p><p>Only one thing left to do, get this whole thing to cram into 13 kb.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The first half of today was all about using the world data we loaded up yesterday and constructing the world from it.  This was almost an
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0037 - js13k competition practice, part 10 of 12: building a world designer</title>
    <link href="http://culture-of-development.com/streams/s0037-js13k-competition-practice-part-10-of-12-building-a-world-designer/"/>
    <id>http://culture-of-development.com/streams/s0037-js13k-competition-practice-part-10-of-12-building-a-world-designer/</id>
    <published>2019-05-08T12:52:18.000Z</published>
    <updated>2019-05-26T13:33:24.546Z</updated>
    
    <content type="html"><![CDATA[<p>If we're going to build a large and engaging world, we need some sort of level designer.  This of course all has to fit in a reasonably small size as well so I figured I would start by looking at what other people have done in the past.  Many of them use images where each pixel's color represents a particular set of features about that location.  Sounds like a good idea, so off we go building out a nice big office building in Paint.NET.</p><p>The fun really starts when we try to get this image data in the browser.  Thanks to roberttables for numerous ideas today.  At the very we get the data loaded up and verify that all of the values we have loaded are known values, then I have a hard stop for other obligations so we'll have to delay the actual building of the new game world until tomorrow.</p><p>After today, the level designer definitely feels like one of the most important parts of the game design process.  The ability to quickly prototype ideas is largely based on how quickly you can build out a level and play through them.  Prior to today the only means we had to build out levels was a manual process of deciding exactly where everything should go, having a constant world size and moving things around was very painstaking.  This dramatically improved my overall experience with that aspect of the game and I want to spend some more time thinking about how to do this better for future projects.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If we&#39;re going to build a large and engaging world, we need some sort of level designer.  This of course all has to fit in a reasonably s
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0036 - js13k competition practice, part 9 of 12: lighting up the world</title>
    <link href="http://culture-of-development.com/streams/s0036-js13k-competition-practice-part-9-of-12-lighting-up-the-world/"/>
    <id>http://culture-of-development.com/streams/s0036-js13k-competition-practice-part-9-of-12-lighting-up-the-world/</id>
    <published>2019-05-01T12:16:06.000Z</published>
    <updated>2019-05-26T13:33:08.807Z</updated>
    
    <content type="html"><![CDATA[<p>Today's big goal was to get the lighting done.  The last critical element of the story is that it's dark in this office and you have to look around.  Around the windows there should be some dim, ambient lighting and there is a flashlight you can find that will make the area around you light up as well.  And don't forget that light should respect walls as well.  Prior to today, I had absolutely no idea how I was going to achieve any of these goals.</p><p>First things first, just make it dark.  First idea was to just put a giant div over the whole thing and have the background be all black, except make it transparent where there was light.  Unfortunately I could not figure out how to do this using multiple backgrounds with CSS, and I didn't want to have one super huge mega image covering the whole board because I felt like that would cause significant resource issues.  The image alone would have been over 10 MB and it would have been manually redrawn on nearly every move.</p><p>My second thought was to just have set levels of light that were available, and do a cell by cell lighting.  I decided to roll with it.  We ran into some CSS issues with the walls, which were set directly on the cell itself.  Instead I moved the walls to their own layer, nested inside of each cell and appended an additional layer for the lights on each cell.  This appears to work and boom, we have some darkness on top of everything.</p><p>Adding in the ambient lighting happened first, which was not particularly difficult, we just defined some cells as windows and then did a once over pass after building the grid to set the ambient light level and after fudging around with the levels a bit, I landed on something that sort of met my expectation.</p><p>The flashlight was a bit more challenging.  The interaction system already had a function that could handle player movement, and took in the previous location and the new location.  I thought to myself, simple enough, we'll just reset the old location lighting, then we'll set the new location lighting.  Yea... not so easy. :)  Watch the video to see how we work through that one.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today&#39;s big goal was to get the lighting done.  The last critical element of the story is that it&#39;s dark in this office and you have to l
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0035 - js13k competition practice, part 8 of 12: finishing up the game mechanics</title>
    <link href="http://culture-of-development.com/streams/s0035-js13k-competition-practice-part-8-of-12-finishing-up-the-game-mechanics/"/>
    <id>http://culture-of-development.com/streams/s0035-js13k-competition-practice-part-8-of-12-finishing-up-the-game-mechanics/</id>
    <published>2019-04-26T12:38:33.000Z</published>
    <updated>2019-05-26T13:32:55.565Z</updated>
    
    <content type="html"><![CDATA[<p>The path was set, we need to wrap up the game mechanics so we can work on polish and getting this all to fit in 13 kb.</p><p>Today we wrapped up a ton of small stuff like:</p><ul><li>collecting items from containers such as filing cabinets</li><li>locked doors</li><li>the actual system that you need to restart as the primary objective</li><li>making things disappear from your inventory once used</li><li>and a few others.</li></ul><p>The big thing I was hoping to accomplish was to get the idea of a desk implemented, but that turned out to be much more difficult than original expected.  We could not find any suitable emojis for a desk, implementing it in CSS was going to require a fair amount of work and new popup interface.  After fumbling around in dead end after dead end for almost an hour, we bailed.  If we have any hope of completing this project on the timeline we originally set forth, this is going to have to be dropped on the floor.  And so that's what we did.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The path was set, we need to wrap up the game mechanics so we can work on polish and getting this all to fit in 13 kb.&lt;/p&gt;
&lt;p&gt;Today we wr
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0034 - js13k competition practice, part 7 of 12: playability improvements</title>
    <link href="http://culture-of-development.com/streams/s0034-js13k-competition-practice-part-7-of-12-playability-improvements/"/>
    <id>http://culture-of-development.com/streams/s0034-js13k-competition-practice-part-7-of-12-playability-improvements/</id>
    <published>2019-04-26T01:50:40.000Z</published>
    <updated>2019-05-26T13:32:39.852Z</updated>
    
    <content type="html"><![CDATA[<p>Today we focused almost entirely on adding in the final playability features and improvements to make certain things more obvious.</p><p>These improvements include things like...</p><ul><li>not walking through walls</li><li>making the dialog screen capture the user input</li><li>showing allowed paths</li><li>making the move counter respect only real actions</li><li>...and a few other quick ones!</li></ul><p>A lot of progress was made in cleaning things up along the way.  This is a good one full of lots of short, impactful changes and we identified a few poor design choices from earlier on as well.  At the very end, we made a solid TODO list for the next before we ended.  There are 5 sessions remaining and we set up a plan on how to spend each day if we had any chance of finishing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we focused almost entirely on adding in the final playability features and improvements to make certain things more obvious.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0033 - js13k competition practice, part 6 of 12: a bit of a day off</title>
    <link href="http://culture-of-development.com/streams/s0033-js13k-competition-practice-part-6-of-12-a-bit-of-a-day-off/"/>
    <id>http://culture-of-development.com/streams/s0033-js13k-competition-practice-part-6-of-12-a-bit-of-a-day-off/</id>
    <published>2019-04-25T01:33:00.000Z</published>
    <updated>2019-05-26T13:32:23.988Z</updated>
    
    <content type="html"><![CDATA[<p>Today was a bit of an off day.  A good day none the less however.</p><p>Minutes before the stream I was notified that the research project I was a part of had been accepted to the <a href="https://learningatscale.acm.org/las2019/" target="_blank" rel="noopener">Learning @Scale 2019 conference</a> and needless to say I was really excited.  In a few months I will officially be able to say &quot;I'm published&quot; in the classical sense.  I spend about 15 minutes at the beginning of the stream describing the work we did and highlighting my contributions to that work.  I think it's pretty fascinating and if you have plans of going back to college, or having kids who might be on their way to college, you might want to give it a once over.</p><p>A few minutes before I got that email, a got a pack in the mail!  A few weeks prior I had won a pack of the <a href="https://www.etsy.com/listing/688771117/heroines-of-javascript-trading-cards" target="_blank" rel="noopener">Heroines of JavaScript trading cards</a> in a raffle on <a href="https://www.twitch.tv/roberttables" target="_blank" rel="noopener">roberttables</a> stream.  I love trading cards, and I read through each and every one of them and noted a few stories along the way.</p><p>After about an hour we finally got to the js13k project and I focused almost entirely on trying to get some CSS cleaned up and working.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today was a bit of an off day.  A good day none the less however.&lt;/p&gt;
&lt;p&gt;Minutes before the stream I was notified that the research proje
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0032 - js13k competition practice, part 5 of 12: adding some emoji graphics, a menu screen and a dialog interface</title>
    <link href="http://culture-of-development.com/streams/s0032-js13k-competition-practice-part-5-of-12-adding-some-emoji-graphics-a-menu-screen-and-a-dialog-interface/"/>
    <id>http://culture-of-development.com/streams/s0032-js13k-competition-practice-part-5-of-12-adding-some-emoji-graphics-a-menu-screen-and-a-dialog-interface/</id>
    <published>2019-04-18T14:40:11.000Z</published>
    <updated>2019-05-26T13:32:06.618Z</updated>
    
    <content type="html"><![CDATA[<p>Today blew my mind!  We started off really easy by swapping out a lot of the color filled blocks that represented items with emoji graphics, largely because emojis are essentially free graphics for your game instead of trying to compress those assets.  We'd like to swap them out for something more consistent across browsers later on, but for now it makes it easier for us to reason about the game interactions as we keep working on them.</p><p>The second major thing we wanted to tackle was adding in a &quot;leaderboard&quot; page.  As you play the game multiple times, it should record your score and you can compete with yourself as you play multiple times.  It also helps to have this because we need to force interaction with the page in order to get the sound to start.  For today we left off the leaderboard widget and just added a giant &quot;play new game&quot; button to start a new game.  To support the leaderboard eventually, we also added a move counter to the game page to track how many moves you have made.</p><p>Next we added a dialog view.  This will be used to drive the story as we progress through the game and it will act as a tutorial interface at the very beginning.  It was a lot of fun building this out and we made a lot of progress today on making this feel like a fully fleshed out game.</p><p>I'd like to give a HUGE shout out to <a href="https://www.twitch.tv/clarkio" target="_blank" rel="noopener">@ClarkIO</a> for the biggest raid I've ever gotten!  This easily put me over the top on my metrics for hitting affiliate and I'm really looking forward to getting that email when I'm back from my trip next week.  Please check out his stream when you have a chance, he's made some great tools for the streamer community and he's a lot of fun to chat with as well!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today blew my mind!  We started off really easy by swapping out a lot of the color filled blocks that represented items with emoji graphi
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0031 - js13k competition practice, part 4 of 12: adding sound effects to interactions</title>
    <link href="http://culture-of-development.com/streams/s0031-js13k-competition-practice-part-4-of-12-adding-sound-effects-to-interactions/"/>
    <id>http://culture-of-development.com/streams/s0031-js13k-competition-practice-part-4-of-12-adding-sound-effects-to-interactions/</id>
    <published>2019-04-16T14:27:56.000Z</published>
    <updated>2019-05-26T13:31:47.938Z</updated>
    
    <content type="html"><![CDATA[<p>This stream was at an unusual time because I unexpectedly have to leave this weekend and don't want to get too far behind on the one month aspect of this practice.</p><p>Today we worked exclusively on adding sound effects to interactions using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank" rel="noopener">web audio api</a>.  There are essentially two ways to incorporate audio, either from a buffer of recorded audio data, or by manipulating a source wave from an oscillator.  Recorded audio gets to be quite large depending on the sample rate used to record the audio (recording 1s of uncompressed audio at 44k samples/sec eats up 44 kb) so the eventual audio we use will almost certainly be generated from an oscillator.</p><p>In looking at how js13k projects incorporate interesting audio from past years, I've noticed that many of them generate sound, but record it to a buffer, and then play the buffer on demand instead of doing all the calculations to generate the audio waves repeatedly.  This helps a lot with performance and also simplifies the playing code a fair amount.  Since we're going to be playing from buffers anyway later on, I decided for this first iteration to just record some audio and then load it up in the browser, focusing mostly on getting the sound effects to trigger at the right times.</p><p>Today was a lot of fun and <a href="https://www.twitch.tv/themichaeljolley" target="_blank" rel="noopener">theMichaelJolley</a> showed up to help me work through some ideas and spit ball what we should do next.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This stream was at an unusual time because I unexpectedly have to leave this weekend and don&#39;t want to get too far behind on the one mont
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0030 - js13k competition practice, part 3 of 12: item interactions, inventory and a win condition</title>
    <link href="http://culture-of-development.com/streams/s0030-js13k-competition-practice-part-3-of-12-item-interactions-inventory-and-a-win-condition/"/>
    <id>http://culture-of-development.com/streams/s0030-js13k-competition-practice-part-3-of-12-item-interactions-inventory-and-a-win-condition/</id>
    <published>2019-04-12T14:13:19.000Z</published>
    <updated>2019-05-26T13:31:30.990Z</updated>
    
    <content type="html"><![CDATA[<p>We're making solid progress so far and after today it really started to feel like &quot;a game&quot; in the sense that most of the component you would expect for a game are there in some minimal form.  This is also the furtherest I've ever really gotten into a game in which you interact with the environment; most games in my past have been psuedo-games where the computer part doesn't actually have knowledge of the rules of the game, it's more just a board in which you manipulate pieces (think like a chess game that doesn't know when you have won or lost).</p><p>It has become clear to me that the super-ad-hoc way this game has been developing has some serious flaws which we will address at some point before we get to the end.  Most notably when one thing needs to change, everything needs to change.  We have also hard baked in the idea of how rendering happens to most objects which is going to make it a huge task to switch should we decide to move to canvas rendering or something else other than manual DOM manipulation.</p><p>Picking up items was quite a bit of fun.  Moving them from their cell to our inventory was quite a challenge but seeing them disappear from the world was really cool.  Making the winning condition check for items in your inventory also really cool.  Time to start thinking more about how objects interact with other objects in the world.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We&#39;re making solid progress so far and after today it really started to feel like &amp;quot;a game&amp;quot; in the sense that most of the compon
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0029 - js13k competition practice, part 2 of 12: a movable player character</title>
    <link href="http://culture-of-development.com/streams/s0029-js13k-competition-practice-part-2-of-12-a-movable-player-character/"/>
    <id>http://culture-of-development.com/streams/s0029-js13k-competition-practice-part-2-of-12-a-movable-player-character/</id>
    <published>2019-04-11T14:06:23.000Z</published>
    <updated>2019-05-26T13:31:07.284Z</updated>
    
    <content type="html"><![CDATA[<p>Now that we have a simple grid world, it's time to make some sort of interaction so we can start playing with it and feel out what works and what doesn't with our ideas so far.  We make a simple way of interacting with the game by moving a purple box around the grid world we have created.  Since this didn't take too long we also added some items to the world and wrote enough code to place them where we want them and give them custom attributes.</p><p>In addition to that, this competition is about building assets that total to less than 13 kb, so we constructed a rudimentary build pipeline that collects the assets, passes it through <a href="https://www.npmjs.com/package/uglify-es" target="_blank" rel="noopener">uglify-es</a>, zips it all up and reports the total size.  We're barely at 2 kb so far!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Now that we have a simple grid world, it&#39;s time to make some sort of interaction so we can start playing with it and feel out what works 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0028 - js13k competition practice, part 1 of 12: research and building a grid world</title>
    <link href="http://culture-of-development.com/streams/s0028-js13k-competition-practice-part-1-of-12-research-and-building-a-grid-world/"/>
    <id>http://culture-of-development.com/streams/s0028-js13k-competition-practice-part-1-of-12-research-and-building-a-grid-world/</id>
    <published>2019-04-10T13:40:28.000Z</published>
    <updated>2019-05-26T13:30:45.216Z</updated>
    
    <content type="html"><![CDATA[<p>Just got back from vacation and it was amazing.  Feeling very re-energized and ready to start a new project.</p><p>I got started with programming like a lot of other people, wanting to make games to play.  I have built some toy games at various points throughout my life and decided that once I graduate from grad school I want to commit to making an actual game that I release to the world.  Before that I'd like to practice, and so I was reminded of a small competition called <a href="https://js13kgames.com/" target="_blank" rel="noopener">js13k</a>.</p><p>The point of js13k is to build a complete game based on a theme that runs in a browser, from scratch, in one month.  And the kicker, <em>all</em> of the games assets must be no larger than 13 kb when zipped up.  There have been some astonishing works of art that have come from this competition; take some time and browse through the winners of previous years competitions.</p><p>I decided that I will enter this competition in 2019, which starts August 13th, 2019, and now is as great a time as any to practice.  I stream 3 days per week and for roughly 2 hours a day, so total I should be able to get around 24 hours into this game.</p><p>In this first episode, I break down how I prepare for competitions like these, decide some high level ideas about the game and get started implementing a simple grid world which is going to be the basis for the world that my game will take place in.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Just got back from vacation and it was amazing.  Feeling very re-energized and ready to start a new project.&lt;/p&gt;
&lt;p&gt;I got started with pr
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0027 - Building a slack bot, part 5: almost there, just a few more bugs</title>
    <link href="http://culture-of-development.com/streams/s0027-building-a-slack-bot-part-5-almost-there-just-a-few-more-bugs/"/>
    <id>http://culture-of-development.com/streams/s0027-building-a-slack-bot-part-5-almost-there-just-a-few-more-bugs/</id>
    <published>2019-03-15T13:35:43.000Z</published>
    <updated>2019-05-26T13:19:26.728Z</updated>
    
    <content type="html"><![CDATA[<p>After some much needed progress yesterday, we realized there were just two major problems to overcome before we could call it an MVP (minimum viable product), just that we need to get all the image manipulation done in memory so we can avoid writing to disk and we need to figure out why the image manipulation pipeline fails the second time you try to run an image through it.</p><p>We don't actually solve either of these issues today, but we make a lot of progress on what doesn't work and why.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After some much needed progress yesterday, we realized there were just two major problems to overcome before we could call it an MVP (min
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0026 - Building a slack bot, part 4: I slept on it, got my head right, let&#39;s give it another go</title>
    <link href="http://culture-of-development.com/streams/s0026-building-a-slack-bot-part-4-i-slept-on-it-got-my-head-right-let-s-give-it-another-go/"/>
    <id>http://culture-of-development.com/streams/s0026-building-a-slack-bot-part-4-i-slept-on-it-got-my-head-right-let-s-give-it-another-go/</id>
    <published>2019-03-14T13:22:11.000Z</published>
    <updated>2019-05-26T13:19:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>Sleep on it.  Your brain does amazing things when you go to sleep that improve your ability to learn and solve problems; just give it the opportunity to do it's thing and over time you'll be a much happier person.  I was having significant troubles with this slack bot and a little sleep and a recharge got me over a big challenge by rethinking where the problem might lie.  By using someone else's slack integration library we are now at the point of being able to collect images from slack and do the modifications we want to them using another library.</p><p>Of course this is still software development, so eventually we run into another problem...  time to go back to sleep.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sleep on it.  Your brain does amazing things when you go to sleep that improve your ability to learn and solve problems; just give it the
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0025 - Building a slack bot, part 3: this is much harder than expected</title>
    <link href="http://culture-of-development.com/streams/s0025-building-a-slack-bot-part-3-this-is-much-harder-than-expected/"/>
    <id>http://culture-of-development.com/streams/s0025-building-a-slack-bot-part-3-this-is-much-harder-than-expected/</id>
    <published>2019-03-13T13:15:27.000Z</published>
    <updated>2019-05-26T13:18:43.580Z</updated>
    
    <content type="html"><![CDATA[<p>We managed to send images to slack, but we hit the struggle bus when it came to collecting images from slack.  The error messages are not helpful, my understanding of what's going on is lacking, my google-fu isn't finding anything, do we just give up?</p><p>This is an example of something I feel like happens all the time when you're learning on your own and it was a large part of the reason why I joined grad school and what I hope to get out of streaming, that is, learning with other people.  The amount of frustration I experience in this episode is unfortunately quite common and I hope this video and the next serve as an example of how we improve ourselves and how we might find better ways of learning new things.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We managed to send images to slack, but we hit the struggle bus when it came to collecting images from slack.  The error messages are not
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0023 - Building a slack bot, part 2: we learn better together</title>
    <link href="http://culture-of-development.com/streams/s0023-building-a-slack-bot-part-2-we-learn-better-together/"/>
    <id>http://culture-of-development.com/streams/s0023-building-a-slack-bot-part-2-we-learn-better-together/</id>
    <published>2019-03-08T14:37:15.000Z</published>
    <updated>2019-05-26T13:18:26.019Z</updated>
    
    <content type="html"><![CDATA[<p>Todays goals were to get our slack bot to respond to messages of the right type, handle the <code>needz moar help</code> request and send actual images to slack in reply to the correct <code>needz moar {something}</code> request.</p><p>Today right at the beginning <a href="https://twitter.com/a1ph4g33k" target="_blank" rel="noopener">@a1ph4g33k</a> stopped by with a suggestion to make something better.  We fired up a VS Code live share and the next three hours were an amazing experience of watching two people learn from each other and accomplish something at the same time.  This was hands down my favorite day streaming to date and I'm extremely thankful there are people like him in this community.</p><p>If you would like to jump on a project, I'm open arms accepting pair programming partners indefinitely, just reach out to me at my <a href="https://twitter.com/fody" target="_blank" rel="noopener">twitter</a> page.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Todays goals were to get our slack bot to respond to messages of the right type, handle the &lt;code&gt;needz moar help&lt;/code&gt; request and send
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0022 - Building a slack bot, part 1: I know nothing about this</title>
    <link href="http://culture-of-development.com/streams/s0022-building-a-slack-bot-part-1-i-know-nothing-about-this/"/>
    <id>http://culture-of-development.com/streams/s0022-building-a-slack-bot-part-1-i-know-nothing-about-this/</id>
    <published>2019-03-07T14:26:02.000Z</published>
    <updated>2019-05-26T13:17:54.642Z</updated>
    
    <content type="html"><![CDATA[<p>At Stack Overflow we have a few bots in our bespoke chat app that really make it a lot of fun to use.  Due to the pressures of not maintaining something that isn't our bread and butter (i.e. Q&amp;A), we've slowly but surely been moving everything over to Slack.  One of the tools that's the most fun is something called the pic bot.  When you reply to an image with the phrase &quot;needz moar {something}&quot; and then replace the something with the thing you want, it modifies the image to add some extra flare to it which normally results in hilarity and a good laugh for everyone.</p><p><img src="/img/slack-bot-before.png" alt="boring screenshot"></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">needz moar jorts</span><br></pre></td></tr></table></figure></p><p><img src="/img/slack-bot-after.jpeg" alt="amazing screenshot"></p><p>And that's essentially the effect we're after.</p><p>Starting today, I know nothing about how to build Slack bots, watch me get up to speed and get a bot running that actually responds to messages.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At Stack Overflow we have a few bots in our bespoke chat app that really make it a lot of fun to use.  Due to the pressures of not mainta
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0022 - Building a slack bot, part 1.5: I still know nothing about this</title>
    <link href="http://culture-of-development.com/streams/s0022-building-a-slack-bot-part-1-5-i-still-know-nothing-about-this/"/>
    <id>http://culture-of-development.com/streams/s0022-building-a-slack-bot-part-1-5-i-still-know-nothing-about-this/</id>
    <published>2019-03-07T14:10:10.000Z</published>
    <updated>2019-05-26T13:17:24.442Z</updated>
    
    <content type="html"><![CDATA[<p>This is simply a continuation of yesterday's video because there was a hiccup in the feed and I had to restart the recording.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is simply a continuation of yesterday&#39;s video because there was a hiccup in the feed and I had to restart the recording.&lt;/p&gt;

      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0020 - Graph reduction: intersections only road map</title>
    <link href="http://culture-of-development.com/streams/s0020-graph-reduction-intersections-only-road-map/"/>
    <id>http://culture-of-development.com/streams/s0020-graph-reduction-intersections-only-road-map/</id>
    <published>2019-03-05T14:08:08.000Z</published>
    <updated>2019-05-26T13:28:56.939Z</updated>
    
    <content type="html"><![CDATA[<p>After taking yesterday off to <em>finally</em> fix a bug I've been looking into for three days (narrator: it was a typo), I'm back at it today for a double length stream!  The goal is to reduce the number of map nodes by eliminating all the points between intersections.</p><p>In real life, many roads are windy and curved.  To make sure that these roads can plot correctly when drawn, the map data contains numerous points for each road segment so that the tool that draws the map can draw them correctly.  From the standpoint of the directions finding problem, the only thing that matters, however, is decision points, i.e. which direction should I go next from this intersection.</p><p>All those little bitty road segments are not decision points, in fact, most of the time you have to keep driving the same direction though many of them.  This is especially easy to see in the case of interstate highways where the exits are miles apart and the roads can have a lot of curves between the exits.  The concept here is that be eliminating those false decision points, we can improve the speed of our search.</p><p>Follow along as we work though this a few times, run into lots of difficult to understand bugs and ultimately reduce the size of the graph by roughly 40%.  After the stream ended I realized how much smaller we can make this as well, so hopefully we'll have time to come back and work on that soon.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After taking yesterday off to &lt;em&gt;finally&lt;/em&gt; fix a bug I&#39;ve been looking into for three days (narrator: it was a typo), I&#39;m back at it 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0019 - Using landmark search in the map demo and shrink reducing the map size</title>
    <link href="http://culture-of-development.com/streams/s0019-using-landmark-search-in-the-map-demo-and-shrink-reducing-the-map-size/"/>
    <id>http://culture-of-development.com/streams/s0019-using-landmark-search-in-the-map-demo-and-shrink-reducing-the-map-size/</id>
    <published>2019-02-28T04:13:28.000Z</published>
    <updated>2019-05-26T13:35:25.986Z</updated>
    
    <content type="html"><![CDATA[<p>Over the weekend I put considerable effort into trying to prove that landmark heuristics were inadmissible and I came up with an example that clearly showed there is a pathalogical graph which the method we had implemented for the landmark heuristic is inadmissible because it overestimates the actual distance to the goal.  I was fairly certain that landmarks were supposed to be addmissible so I revisited the original paper to give it a more critical eye and sure enough the method we used was only correct for undirected graphs, but it fails misterably for directed graphs.  It took a few tries to get it all right but I finally got all the tests to go green again.</p><p>On stream the plan was to get this all hooked into the demo map and see if we accomplished our goal from last time of getting the time it takes to run a search down significantly.  What we were able to verify is that this was reducing the number of nodes explored however it was not doing so dramatically enough to reduce the time a noticable amount.  So basically the grand plan was not quite achieved, but that's not the end of the road of course.  There's still bidirectional A* and there are other options as well.</p><p>The first thing I tried to tackle today was to reduce the graph to only contain intersections.  Along many of the roadways, especially the highways, there are long stretches of points that are necessary to build correctly show the curve of the road, however the points only have one way in and one way out.  Think about an interstate.  There are long sections of windy road where you realistically cannot change direction.  The only real place to change direction is when you reach an exit, which only happens every so often.  In more rural aread it might be as much as 10 or 20 miles between exits, but there are still going to be tons of twists and turns that need lots of points to correct show on the map.  The idea is to reduce the map so that all of the non intersection points are removed and it's just a map that consists only of intersections.  I ran out of time while working on this and had to set it aside.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Over the weekend I put considerable effort into trying to prove that landmark heuristics were inadmissible and I came up with an example 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0017 - Quick performance wins for the map demo</title>
    <link href="http://culture-of-development.com/streams/s0017-quick-performance-wins-for-the-map-demo/"/>
    <id>http://culture-of-development.com/streams/s0017-quick-performance-wins-for-the-map-demo/</id>
    <published>2019-02-23T03:27:17.000Z</published>
    <updated>2019-05-26T13:34:53.124Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday life came up and I had to bail unexpectedly on the stream, so today I went for a double length and tried to get 2 things done instead of one.  I'd say we made it through roughly 1.5 things :).  In case you're curious what came up, my son decided to administer my daughter's first ever haircut using some kitchen shears he found on the counter.  My wife was overcome with a large number of emotions; I had to run interference since it's my job as a parent first and foremost to keep everyone alive.</p><p>Today's tasks were to improve the time it takes to find the nearest points to the locations clicked on the map for the start and end of the directions and to improve the time it takes for the search to complete.  The first task I knew would be fairly easy because it's a well documentated problem, but the second problem was going to be more difficult and it turns out I was correct on both counts.</p><p>Improving the speed of finding the closest location is called a <a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search" target="_blank" rel="noopener">nearest neighbor search</a> and there are lots of ways to accomplish this task.  One of the simplest approaches, and probably the most prominent technique, is to use a <a href="https://en.wikipedia.org/wiki/K-d_tree" target="_blank" rel="noopener">K-D tree</a>.  In the average case a K-D tree can find the single nearest neighbor in <code>O(log n)</code> compared to the <code>O(n)</code> time full scan we were doing.  In the New York dataset there are roughly 708,000 nodes, and the log base 2 of that is roughly 20.  You can see how even with a little bit of overhead this is a huge peformance improvement and it showed in the numbers where the scan was taking roughly 330 milliseconds, the K-D tree takes only 0.2 milliseconds on average.  That was a huge win.</p><p>Improving the speed of the search is a much more difficult problem and there are lots of ways to do it.  The approach I decided to take was to improve the heuristic that the search used to estimate the remaining path length.  The simple approach we used previously was the straight-line havesine distance.  This works well for small area graphs like the one's we've been using, however when you expand the graph to say the entire United States, all of a sudden you're searching way too many nodes for each search.  I decided to use the ALT algorithm, as outlined in <a href="http://www.academia.edu/download/5622730/10.1.1.136.1062.pdf" target="_blank" rel="noopener">Computing the shortest path: A search meets graph theory (Goldberg and Harrelson 2005)</a>.</p><p>ALT stands for A* search, landmarks heuristic, triangle inequality which are the main components of the algorithm.  Additionally one other major component from the paper is bidirectional A* search, which we have not yet attempted.  In this stream I worked on the landmarks portion of this paper and holy cow did we run into some problems.  Have a look and watch the highs and the lows as we learn a ton in this 4 hour stretch.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday life came up and I had to bail unexpectedly on the stream, so today I went for a double length and tried to get 2 things done i
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0016 - A little documentation goes a long way</title>
    <link href="http://culture-of-development.com/streams/s0016-a-little-documentation-goes-a-long-way/"/>
    <id>http://culture-of-development.com/streams/s0016-a-little-documentation-goes-a-long-way/</id>
    <published>2019-02-21T03:18:36.000Z</published>
    <updated>2019-05-26T13:15:43.149Z</updated>
    
    <content type="html"><![CDATA[<p>Today we started by paying down a little of the &quot;works on my machine&quot;-only debt by adding a script to pull in the map data from open street map and removing the hardcoded paths in the project so that they are now relative paths.  You can see the simple documentation for getting the demo up and running on the <a href="https://github.com/culture-of-development/fast" target="_blank" rel="noopener">readme.md in the root of the repo</a>.</p><p>It's important to add little bits like this so that other people can make use of your work and it's also a great idea to include a little graphic of the thing working, either a short video, a gif or just a static image.  Not everyone is going to download your project and get it running just to see what it's like and making it as easy as possible to get a glimpse is a great way to build excitement for your project or convince a would-be new employer that your project has merit.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we started by paying down a little of the &amp;quot;works on my machine&amp;quot;-only debt by adding a script to pull in the map data from
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0015 - Implementing a demo front end for the finding directions problem</title>
    <link href="http://culture-of-development.com/streams/s0015-implementing-a-demo-front-end-for-the-finding-directions-problem-day-15/"/>
    <id>http://culture-of-development.com/streams/s0015-implementing-a-demo-front-end-for-the-finding-directions-problem-day-15/</id>
    <published>2019-02-15T18:56:26.000Z</published>
    <updated>2019-05-26T13:29:48.513Z</updated>
    
    <content type="html"><![CDATA[<p>Today we built out a webapi app the load up the model and let us get direction instantly on a Google maps interface.  Using this we did some really basic profiling and found that the majority of the time is spent finding the closest node to the click location and not the actual search itself.  I guess we know what to fix before we ramp up the problem size again.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we built out a webapi app the load up the model and let us get direction instantly on a Google maps interface.  Using this we did s
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0014 - Building a roadways graph from OpenStreetMap data</title>
    <link href="http://culture-of-development.com/streams/s0014-building-a-roadways-graph-from-openstreetmap-data-day-14/"/>
    <id>http://culture-of-development.com/streams/s0014-building-a-roadways-graph-from-openstreetmap-data-day-14/</id>
    <published>2019-02-14T18:48:31.000Z</published>
    <updated>2019-05-26T13:16:53.631Z</updated>
    
    <content type="html"><![CDATA[<p>Today we extracted a graph of roadways from the <a href="https://wiki.openstreetmap.org/wiki/Planet.osm#Country_and_area_extracts" target="_blank" rel="noopener">OpenStreetMap data dump</a> for the city of <a href="https://www.google.com/maps/place/Lima,+Peru/@-12.0262676,-77.1278649,11z/data=!3m1!4b1!4m5!3m4!1s0x9105c5f619ee3ec7:0x14206cb9cc452e4a!8m2!3d-12.0463731!4d-77.042754" target="_blank" rel="noopener">Lima, Peru</a>.  Why Lima?  It's fairly large but not whole world so we can ramp up the problem size.  This process turned out to be pretty straightforward and after cleaning up a few minor mistakes we got the problem running.</p><p>First we tried IDA* and that turned out to be really slow to make progress because there are a lot of very minor improvements in the distance with this larger dataset.  We'll have to consider some alternatives to that in the future but in order to keep making progress today we just switched over to vanilla A*.  There are roughly 800,000 edges in this final graph so A* shouldn't take very long even if it has to explore a large number of them.  For the heuristic we used <a href="https://www.movable-type.co.uk/scripts/latlong.html" target="_blank" rel="noopener">Haversine formula</a> to calculate straight line distance on the surface of a sphere.</p><p>Guess what? IT WORKED!  And we plotted the route on Google Maps!  This felt like such an accomplishment and it was really incredible, so thanks to everyone who joined me on this journey so far.  &lt;3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we extracted a graph of roadways from the &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Planet.osm#Country_and_area_extracts&quot; target
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0013 - Mostly chatting about pattern databases</title>
    <link href="http://culture-of-development.com/streams/s0013-mostly-chatting-about-pattern-databases-day-13/"/>
    <id>http://culture-of-development.com/streams/s0013-mostly-chatting-about-pattern-databases-day-13/</id>
    <published>2019-02-13T18:51:53.000Z</published>
    <updated>2019-05-26T13:34:16.078Z</updated>
    
    <content type="html"><![CDATA[<p>Today was a lot of fun!  We recapped a lot of what I accomplished off-stream and then we got into a discussion about heuristics for the NPuzzle problem.  This went from linear conflict to pattern databases and took a deviation into admissibility of heuristics for a bit.</p><p>At the end we decided to switch gears and collect some data for scaling up the finding directions problem.  We didn't get too far but we did find a library to help make loading the data much easier.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today was a lot of fun!  We recapped a lot of what I accomplished off-stream and then we got into a discussion about heuristics for the N
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0012 - Implementing the finding directions problem</title>
    <link href="http://culture-of-development.com/streams/s0012-implementing-the-finding-directions-problem/"/>
    <id>http://culture-of-development.com/streams/s0012-implementing-the-finding-directions-problem/</id>
    <published>2019-02-09T02:37:42.000Z</published>
    <updated>2019-05-26T13:30:18.639Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday we abstracted away the concept of a problem to be solved by a search algorithm and today I decided we should go ahead and test our theory that it was successful by implementing a second problem.  I decided to choose the problem of finding driving directions because it's a hard problem with a sufficiently large amount of states.  It's also just kinda cool to think we can implement the same kind of algorithm used by Google Maps and at the same scale.</p><p>We spent a lot of time designing the problem definition first and working our way backward to the actual data.  Check out the video for a short explanation of exactly why we designed things that way instead of trying to find a bunch of data first and working forward to the actual problem definition from that (spoiler alert: the code came out really clean and readable).</p><p>As time was running out I tried to get a test up and running so I grabbed the classic Romania map problem from <a href="https://amzn.to/2GiSiPg" target="_blank" rel="noopener"><em>the</em> AI book</a>.  I ran out of time before setting up a test for this, but we'll get to that next week.  In the meantime, please check out <a href="https://github.com/culture-of-development/fast" target="_blank" rel="noopener">the code</a> and we'll see you all next week!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday we abstracted away the concept of a problem to be solved by a search algorithm and today I decided we should go ahead and test 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0011 - Abstracting away the problem</title>
    <link href="http://culture-of-development.com/streams/s0011-abstracting-away-the-problem/"/>
    <id>http://culture-of-development.com/streams/s0011-abstracting-away-the-problem/</id>
    <published>2019-02-08T02:24:46.000Z</published>
    <updated>2019-05-26T13:16:07.087Z</updated>
    
    <content type="html"><![CDATA[<p>Today we started off by updating the goal state to <em>actually</em> match the literature, then we fixed a couple of bugs that popped up once we reran the tests and finally we wrapped up by abstracting out the concept of a problem and making the search solver interface generic.</p><p>One key idea for the search algorithms is that they can solve a plethera of problems.  Our implementation up to this point had the actually problem we were trying to solve baked in pretty hard.  I knew if we wanted to make it generic, now was a better time than not because each time we add a new search technique, all we do is increase the time it would take to solve a second problem later on.</p><p>This process turned out to be a little complicated and really tested the extent of my C# knowledge.  We had to deal with co/contra-variance, figuring out exactly what the abstraction should look like and some really non descriptive error messages.  Amazingly I wrapped up this code after a marathon 1.5 hour session and IT RAN before the end of the stream!</p><p>The result of this was that the NPuzzle problem had been completely eliminated from all files in the search project except for where it was defined.  Now we should be ready to add a second problem... or maybe we'll keep grinding on improving the heuristics for this problem a bit.  In the end we'll need to do both.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we started off by updating the goal state to &lt;em&gt;actually&lt;/em&gt; match the literature, then we fixed a couple of bugs that popped up 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0010 - Dealing with really subtle problems and math</title>
    <link href="http://culture-of-development.com/streams/s0010-dealing-with-really-subtle-problems-and-math/"/>
    <id>http://culture-of-development.com/streams/s0010-dealing-with-really-subtle-problems-and-math/</id>
    <published>2019-02-07T02:05:21.000Z</published>
    <updated>2019-05-26T13:27:55.602Z</updated>
    
    <content type="html"><![CDATA[<p>Today was amazing!  Streaming is so much more fun when there are a ton of people hanging out and making it interesting and really the best part of it is the learning experience for me.  A while back we had changed the goal state for the NPuzzle problem to have the blank in the bottom left hand corner.  Turns out this does <em>not match</em> the literature... opps my bad.  Also this led to a really long and drawn out debugging process.</p><p>The hardest debugging sessions are the ones where you expect one thing to be true so much that when it turns out to not be true, you spend the majority of the time questioning your method for determining whether it was true or not instead of accepting it and considering how to find the actual source of the problem.  And you do all this despite the multitude of obvious evidence to the contrary.</p><p>In this case, I had previously implemented the NPuzzle problem following the literature (<a href="https://github.com/NickLarsen/heuristic-search" target="_blank" rel="noopener">which you can play with here</a>), and I <em>knew</em> that the states were solvable... because I mean I had done it already.  First we noticed that I was exploring too deep into the search for a particular 4x4 puzzle which I had lifted directly from <a href="https://cse.sc.edu/~mgv/csce580f12/gradPres/korf_IDAStar_1985.pdf" target="_blank" rel="noopener">the paper</a>.  Clearly there was a bug.</p><p>I started looking for it in so many places, essentially everything I had implemented this time around.  Then one of my viewers chimed in and asked if I had tested if it was solvable or not.  And of course I was like... it's from the paper, it's solvable.  I assumed I'd be able to find my bug if I checked solvability after each swap to see which state it came from, so I implemented the solvability check and low and behold it was saying not solvable right from the start.</p><p>Naturally, I must have implemented the check incorrectly.  This is where things got interesting.  Take a peek at the video today and watch me go through round after round of slowly realizing the truth.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today was amazing!  Streaming is so much more fun when there are a ton of people hanging out and making it interesting and really the bes
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0009 - N-Puzzle: Ramping up the problem size</title>
    <link href="http://culture-of-development.com/streams/s0009-n-puzzle-ramping-up-the-problem-size/"/>
    <id>http://culture-of-development.com/streams/s0009-n-puzzle-ramping-up-the-problem-size/</id>
    <published>2019-02-01T22:15:58.000Z</published>
    <updated>2019-05-26T13:34:31.148Z</updated>
    
    <content type="html"><![CDATA[<p>Today we started off with the goal of trying to ramp up the problem size for the N-Puzzle problem.  Under our previous implementation, we would have had to go from a state space size of 9! to a statespace size of 16!, or roughly an 8 orders of magnitude increase.  That's a little too baller for where things are right now, so instead I wanted a way to ramp up the problem size a bit less.  To do this, we relaxed the constraint that the board must be square an instead let there be differing height and width.</p><p>This conversion turned out to be a good bit easier than expected and after we were done we ran the full test suite... which highlighted a bug in <code>OpenSet</code>.  Yea, another bug in that thing.  This one turned out to be easier to fix because I had just left out one condition where were not correctly removing states from the set.</p><p>After this we were able to solve the 3x4 puzzle problem with manhattan distance very quickly.  We ramped it right up to one of the easier 4x4 grids and then it did not complete... and eventually we killed it.  We spent some time tooling it to see the output heartbeat and what we noticed was that the speed was quickly dropping off after the first 100,000 or so states made it in the system.  This just became our TODO for next week.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we started off with the goal of trying to ramp up the problem size for the N-Puzzle problem.  Under our previous implementation, we
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0008 - Implementing an OpenSet for AI search algorithms</title>
    <link href="http://culture-of-development.com/streams/s0008-implementing-an-openset-for-ai-search-algorithms/"/>
    <id>http://culture-of-development.com/streams/s0008-implementing-an-openset-for-ai-search-algorithms/</id>
    <published>2019-01-31T22:07:58.000Z</published>
    <updated>2019-05-26T13:30:02.977Z</updated>
    
    <content type="html"><![CDATA[<p>Today we fixed our <code>OpenSet</code> implementation and chatted a bit about some myths about AI in general.  We had a fair amount of dicussion today and it was blast!  Sorting out the details of the open set required using two collections, one to quickly load up the min item, and another to maintain a fast lookup of state costs.  This class ended up being a fairly typical programming exercise and you can watch me go through various phases of frustration and raw joy as we finally got it working.</p><p>With this done, we spent a fair amount of time grinding through some example problems to see how the heuristics affect the number of nodes you have to explore in order to find the goal.  Tomorrow we'll see if we can ramp up the difficulty by increasing the size of the board.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we fixed our &lt;code&gt;OpenSet&lt;/code&gt; implementation and chatted a bit about some myths about AI in general.  We had a fair amount of d
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0007 - AI and chatting</title>
    <link href="http://culture-of-development.com/streams/s0007-ai-and-chatting/"/>
    <id>http://culture-of-development.com/streams/s0007-ai-and-chatting/</id>
    <published>2019-01-30T21:55:33.000Z</published>
    <updated>2019-05-26T13:16:22.119Z</updated>
    
    <content type="html"><![CDATA[<p>Today we went over some things I took care of off stream, namely refocusing the code to more closely match what you see when you visit wikipedia.  This big change came about when I showed some friends what we have been working on and their first complaint was &quot;wow, that's really hard to follow&quot;.  Thanks y'all.  That's double speak because at the end of the day they were right, it was hard to follow and most notably I left out the closed set, which is what makes BFS act like BFS and not search the same node multiple times.</p><p>On that note turns out we have a bug with the <code>OpenSet</code> where we still are exploring the same nodes multiple times.  That basically means the set isn't respecting the set property.  To make this easier to see, we added a test project and change the fast.search project into a class lib instead.  Overall the code is cleaner and easier to run small little segments of code at a time.</p><p>Thanks to everyone who joined and I look forward to seeing you all tomorrow!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we went over some things I took care of off stream, namely refocusing the code to more closely match what you see when you visit wi
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0006 - 8 Puzzle Perf Tooling</title>
    <link href="http://culture-of-development.com/streams/s0006-8-puzzle-perf-tooling/"/>
    <id>http://culture-of-development.com/streams/s0006-8-puzzle-perf-tooling/</id>
    <published>2019-01-25T19:35:03.000Z</published>
    <updated>2019-05-26T13:15:35.409Z</updated>
    
    <content type="html"><![CDATA[<p>Today we set out to achieve the 5 goals listed on yesterday's stream:</p><ul><li><s>redfine the goal state to match what's common in the literature</s></li><li><s>add some performance tooling, counters for explored nodes and a regular pulsing of performance info</s></li><li><s>improve the nodes explored per sec by orders of magnitude</s></li><li>implement the manhattan distance metric</li><li><strong>actually find the optimal solution to the hardest 8 puzzle problem!</strong></li></ul><p>We didn't get quite as far as I had hoped, but we did make good progress and now we can see that using A* with Hamming distance heuristic does infact search deeper than breadth first search.  Overall this is important to convincing us this trek might be worthwhile.</p><p>Next week we'll start using a more Github friendly workflow of using issues and pull requests to track progress which will be a learning experience for me and I'll love your input.  On that note, <a href="https://github.com/culture-of-development/fast" target="_blank" rel="noopener">check out the code the on github</a> and feel free to contribute; I'll highlight your work on stream!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we set out to achieve the 5 goals listed on yesterday&#39;s stream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;redfine the goal state to match what&#39;s common in th
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0005 - Search Problems: A*</title>
    <link href="http://culture-of-development.com/streams/s0005-search-problems-a-star/"/>
    <id>http://culture-of-development.com/streams/s0005-search-problems-a-star/</id>
    <published>2019-01-24T19:07:35.000Z</published>
    <updated>2019-05-26T13:36:08.082Z</updated>
    
    <content type="html"><![CDATA[<p>Today we continued out trek on search problems.  We implemented <a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noopener">breadth first search</a> and <a href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank" rel="noopener">A*</a> using <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="noopener">Hamming distance</a> as the heuristic which we applied to the 8 puzzle problem.  We verified the correctness of finding the optimal solution by solving problems with only a few moves to reach the goal.  Once that was done, we ramped up to the hardest problem for the 8 problem and saw that even my beefy ass computer with 128 GB of ram was still easily resource exhausted using both of these techniques.</p><p>For reference, the harest 8 puzzle problem is (0 is the blank) (<a href="http://w01fe.com/blog/2009/01/the-hardest-eight-puzzle-instances-take-31-moves-to-solve/" target="_blank" rel="noopener">source</a>):</p><blockquote><p>8 6 7<br>2 5 4<br>3 0 1</p></blockquote><p>Try to solve that in 31 moves by hand!</p><p>The last 5 minutes really sums up how incredible of a challenge it is going to be to find the optimal way to solve matrix multiplication using search techniques.  This game only has 9! solvable states (362,880 / 2) and somehow we managed to use a technique which explores 10&lt;sup&gt;12&lt;/sup&gt; states.  That's 7 order of magnitude too many!  Finding good heuristics is going to be key if we're going to have any chance of completing our goal of finding a new state of the art way to do dense matrix multiplication.</p><p>The todo list for tomorrow is:</p><ul><li>redfine the goal state to match what's common in the literature</li><li>add some performance tooling, counters for explored nodes and a regular pulsing of performance info</li><li>improve the nodes explored per sec by orders of magnitude</li><li>implement the manhattan distance metric</li><li><strong>actually find the optimal solution to the hardest 8 puzzle problem!</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we continued out trek on search problems.  We implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0004 - Stack Overflow Dev Survey 2019 + more</title>
    <link href="http://culture-of-development.com/streams/s0004-stack-overflow-dev-survey-2019-more/"/>
    <id>http://culture-of-development.com/streams/s0004-stack-overflow-dev-survey-2019-more/</id>
    <published>2019-01-23T19:23:13.000Z</published>
    <updated>2019-05-26T13:35:50.766Z</updated>
    
    <content type="html"><![CDATA[<p>Today we started off with me filling out the 2019 Stack Overflow Developer Survey and talking a little bit about myself when answering the questions.  Not all of them make perfect sense and there was a little ambiguity which was fun, and I got talked a little about some of my crazy artificial intelligence predictions for the future.</p><p>After that we moved on to a little infrastructure work for some search algorithms, in particular implementing the <a href="https://en.wikipedia.org/wiki/15_puzzle" target="_blank" rel="noopener">N-Puzzle</a>, that we're going to use as our test bed to learn about some more advanced search techniques.</p><p>In the closing few minutes I explain the long term goal, which is to reframe the matrix multiplication problem from last week as a search problem in order to write a program that can find the optimal way to do dense matrix multiplication and beat the speed we initially set as a target by doing a 2048x2048 multiplication in python that finishes in like 25 ms.  The python implementation is delegating out to MKL on my machine which means if we can beat this, we beat the implementation by the people who build the chips, and that sounds like a lot of fun to me.</p><p>Thanks again to everyone who joined us today, see you all soon!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today we started off with me filling out the 2019 Stack Overflow Developer Survey and talking a little bit about myself when answering th
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0003 - Cleaning up my Stack Overflow comment history</title>
    <link href="http://culture-of-development.com/streams/s0003-cleaning-up-my-stack-overflow-comment-history/"/>
    <id>http://culture-of-development.com/streams/s0003-cleaning-up-my-stack-overflow-comment-history/</id>
    <published>2019-01-18T19:25:52.000Z</published>
    <updated>2019-05-26T13:27:36.127Z</updated>
    
    <content type="html"><![CDATA[<p>Today I cleaned up my comment history on Stack Overflow.  It's amazing/fun/disappointing/frustrating and a few other feelings right now.  I definitely said some not nice things, defended my answers as opposed to lifting up others and use notable sarcasm in some posts.  Most of my comments were fine, many of them just needed to be cleaned up because the person provided the details I asked for and overall I feel good that I left the site better today and then I showed up.  It was fun looking at some of my old posts, the good, the bad and the ugly.  I have clearly grown as a developer and this was a nice reminder of that.</p><p>Today I focused mainly on the newest comments and the oldest comments.  I noticed a few patterns which were very common.  Plain and simple, the site <em>looks</em> better as someone looking for an answer when <em>there are no comments</em>.  In truth the comments on Stack Overflow are primarily outdated and not useful within minutes of being posted.  There were some notable exceptions where people pointed out critical improvements, but in almost every case it would have been better to simply update the answer or question text.  My off-the-cuff estimate is that a solid 90% of comments are a waste of space on the Stack Overflow proper for people who landed there from Google.  Maybe in future I'll try to explore some mock ups without the clutter.</p><p>Next time I grind through comment cleanup I intend to focus on the comments on questions that get viewed the most and the ones that get viewed the least.  Those on the questions that are viewed the most have large impact but the ones on questions that are viewed the least are usually the result of really poor questions which need cleanup anyway.</p><p>See you all next week!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I cleaned up my comment history on Stack Overflow.  It&#39;s amazing/fun/disappointing/frustrating and a few other feelings right now. 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0002 - Fast Matrix Multiplication Attempt #1</title>
    <link href="http://culture-of-development.com/streams/s0002-fast-matrix-multiplication-attempt-1/"/>
    <id>http://culture-of-development.com/streams/s0002-fast-matrix-multiplication-attempt-1/</id>
    <published>2019-01-18T01:40:32.000Z</published>
    <updated>2019-05-26T13:28:15.173Z</updated>
    
    <content type="html"><![CDATA[<p>Today I took a stab at showing how writing some processor cache aware code can vastly improve the speed of matrix multiplication in .NET, only it didn't.  I'm still not sure why but watch the utter surprise on my face as it happens live!</p><p>I plan to revisit this in the future, but for the time being check out <a href="https://akkadia.org/drepper/cpumemory.pdf" target="_blank" rel="noopener">this paper</a> where I learned most of what I know on this topic.  Perhaps some of those ideas are outdated?  We'll find out as we explore this futher in the future, but for now we'll move on to other topics.</p><p>One big thing I noticed today is that the stream got a lot more interesting when it switched from &quot;me trying to teach stuff&quot; to &quot;me trying to learn stuff&quot; so I think starting next week I'm going to change the way I frame these sessions into me learning something new every day.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I took a stab at showing how writing some processor cache aware code can vastly improve the speed of matrix multiplication in .NET,
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>S0001 - I&#39;m starting a new book on software performance</title>
    <link href="http://culture-of-development.com/streams/s0001-i-am-starting-a-new-book-on-software-performance/"/>
    <id>http://culture-of-development.com/streams/s0001-i-am-starting-a-new-book-on-software-performance/</id>
    <published>2019-01-17T13:07:42.000Z</published>
    <updated>2019-05-26T13:37:23.271Z</updated>
    
    <content type="html"><![CDATA[<p>Hello everyone!  Just a quick note that I'm getting back to streaming and big news, I'm writing a book on how to be a software developer with a performance mindset!  When it comes to software development, whether on premesis or in the cloud, computing resources cost real money.  By adopting a performance mindset you can make your work more valuable to your company by saving them real money.</p><p>I started off the stream in classic fashion by forgetting to turn my mic on and was only alerted to it 45 minutes into the broadcast, but I've cleaned that up for youtube video.  I hope to use this stream as a way to start conversations on each of the topics I intend to cover to help me find ways to present the topics in easier ways than I could by myself.  Today I started off doing a first pass on explaining how to select algorithms, showing an example of how different runtimes compare with a simple algorithm of finding if any value from one list is in another list.  We see that even simple problems like this <em>need</em> performance to be considered in order to avoid excessively long runtimes.</p><p>The first 8 minutes or so of today's stream do a good introduction of the topics I intend to cover in the book and the rest starts to dive into algorithm selection.  Let me know what makes sense to you, or what could be improved, in the comments below!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello everyone!  Just a quick note that I&#39;m getting back to streaming and big news, I&#39;m writing a book on how to be a software developer 
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>Full Mock Technical Interview</title>
    <link href="http://culture-of-development.com/streams/full-mock-technical-interview/"/>
    <id>http://culture-of-development.com/streams/full-mock-technical-interview/</id>
    <published>2018-03-23T17:00:00.000Z</published>
    <updated>2018-03-29T02:45:12.775Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Stream tomorrow (Friday 3/23) from 1-3pm EST, what should we do?</p>&mdash; Nick Larsen (@fody) <a href="https://twitter.com/fody/status/976946433252356097?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">March 22, 2018</a></blockquote></p><p>The inspiration for this week's stream is to share a passion of mine which is teaching people how to succeed at technical interviews.  In this stream we cover a lot of the key aspects which you'll be graded on during an interview as well and do a full technical interview with Pablo, a friend of mine from the OMSCS program at Georgia Tech.</p><p>After the interview we take some questions from chat and discuss them in depth to help you figure out what to focus on when preparing for your next interview.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Stream tomorrow (Friday 3/23) from 1-3pm EST, what should we do?
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>Teleprompter for Google Hangouts</title>
    <link href="http://culture-of-development.com/streams/teleprompter-for-google-hangouts/"/>
    <id>http://culture-of-development.com/streams/teleprompter-for-google-hangouts/</id>
    <published>2018-03-16T17:00:00.000Z</published>
    <updated>2019-01-17T13:08:52.036Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Gonna try out this streaming while coding thing this weekend, what should I code?</p>&mdash; Nick Larsen (@fody) <a href="https://twitter.com/fody/status/974418016745197569?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">March 15, 2018</a></blockquote></p><p>The inspiration for this came from doing interviews but there are tons of uses for this.  Whenever you are reading from a script and trying to talk to someone face to face at the same time, there is a disconnect where you are unable to guage the other person's reaction to the things you say.</p><p>The goal of this project is to give you a way to still look at the person who you are talking to.  Because you don't really want this to get in the way, we use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition" target="_blank" rel="noopener">SpeechRecognition</a> tooling built into the browser to automatically track what we're saying and auto check off the items in our script.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Gonna try out this streaming while coding thing this weekend, wh
      
    
    </summary>
    
      <category term="streams" scheme="http://culture-of-development.com/streams/"/>
    
    
  </entry>
  
  <entry>
    <title>How Developers Can Best Negotiate Their Salary</title>
    <link href="http://culture-of-development.com/blog/how-developers-can-best-negotiate-their-salary/"/>
    <id>http://culture-of-development.com/blog/how-developers-can-best-negotiate-their-salary/</id>
    <published>2017-10-16T14:47:08.000Z</published>
    <updated>2019-01-13T16:14:22.064Z</updated>
    
    <content type="html"><![CDATA[<p>Whether it’s your first position out of college or a more advanced, senior role, receiving a job offer in development is an exciting accomplishment. It can be easy to get wrapped up in the excitement, but you need to keep your wits about you for just a little bit longer so you can get through the process of negotiating your salary. While your salary is one part of the package, it’s important to understand that it is probably the only part of your package that changes when you get a raise (assuming equity is not part of the compensation package). It’s crucial for long term happiness to negotiate a salary that represents your own self worth.</p><h2>The Basics</h2><p>Software development is not unskilled labor. You’re not going to be working on an assembly line, adding one screw to each cog that passes. You’re not going to be swiping groceries past a barcode reader. Each line of code that you write has concerns that come with it, from whether or not it actually accomplishes the goal that needs to be accomplished, to how well it handles edge cases, to how easy it is to make changes to when requirements get updated.</p><p>This is important to understand because it means companies are not simply setting a price to have screw put in a cog. The <em>quality</em> of the work is a concern in how companies price developer salaries. Companies with more challenging problems are willing to pay more for developers with the skills to solve their problems.</p><p><img src="/img/value-overlap-situations.png" alt="Crappy Venn Diagram"></p><p>The presentation above shows your own self worth on the top and how much the company values your ability to solve their problems at the bottom. The scale from bottom of page to top of page is the package they offer you, of which your salary makes up the largest component.</p><p>You should strive to work for companies that value you at least as much as you value yourself. In the image above, you should strive to work for companies where your self worth overlaps the worth the company places on your skills.</p><h2>Determining Company Worth</h2><p>The first step to successfully negotiating your salary is to do your homework. You need to have a realistic idea of what the talent market looks like that the company is competing for a share of. There are many factors that go into calculating the going rate for a developers: the location of the job, the problems the company needs solved, the financial well being of the company, and the full employee package that includes vacation/insurance/etc.</p><p>It’s difficult to say with certainty what a specific company should be paying for a specific job, but you can estimate what a reasonable range is using tools like Stack Overflow’s new <a href="https://stackoverflow.com/jobs/salary?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=sal-calc&amp;utm_content=silge-article" target="_blank" rel="noopener">Salary Calculator</a>. You can put in some basic information about the job to determine what salary developers doing similar work are earning right now. Once you feel like you have a pretty good idea of the range that company you are interviewing with should be hiring at, store that information somewhere that you won’t lose it.</p><h2>Determining Self Worth</h2><p>When I say self worth here, I don’t mean your self esteem, I mean where your income should be relative to others in the same market. Should you be paid more than the average for your market, about at the average or a little less than the average? This has a lot to do with your experience and more so with your accomplishments. If you have no accomplishments to show, expect to be a little below average. If you have some accomplishments, expect to be around average and if you’ve had significant ownership of big projects with positive results, expect to be paid more than average.</p><p>There is a lot of nuance here, but in general previous success in software development is indicative of future success in software development and the amount and difficulty of your prior work act as multipliers in the expectation that your prospective employer builds for you. Increased expectation of your productivity leads to higher salary offers.</p><p>The trick here is to find the lower bound for what you think your salary should be relative to others in your market. Take a toll of all the things you’ve done (more specifically all the things on your resume because that’s probably all the company will know about you to begin with) and how difficult they were for you. I stress thinking about how hard they were for you because if you get into the trap of comparing your accomplishments to others you’ll make two big mistakes. The first is that you think everything you have done is easy after you’ve done it, and everything you haven’t done is much harder because you haven’t done it. The second is, it’s not your job to determine how important something is, it’s the company’s job because each company needs different work done and needs to fill the gaps they have in their current collection of devs.</p><p>When you’ve got an idea of how hard the challenges are that you have solved and how much work you’ve gotten done successfully, it’s time to find out about where in the range you should be.</p><p>If you’re a new grad or not classically trained and have never had a developer position before, put your finger on the 25th percentile. If you demonstrably outperformed your classmates in terms of score (GPA or some other widely accepted measure), move your finger up a little. If you have a masters degree, move your finger up a little. If you have public artifacts showing the work you’ve done or the things you know (blog posts, live on the internet working projects, etc), move your finger up a little. That’s it. That’s about where you should be, maybe as low as the 25th percentile, never below it and very likely below the 50th percentile.</p><p><img src="/img/skill-percentiles.png" alt="Percentile bars"></p><p>If you’ve done some solid dev work such that people would consider you intermediate (professionally or not) and built things that people rely on, or you are a fresh grad with a Ph.D., then you start out at the 50th percentile. This implies that your developer tooling is mature enough to solve problems quickly and evaluate multiple solutions. If you feel like your collection of work is difficult on the relative scale of your field, nudge your finger up a little. If the success rate of the projects you have worked on is 60% or less, nudge your finger down a little. Greater than 80%, nudge your finger up a little. Be honest about this one, and notice I didn’t say <em>your</em> projects, because we pretty much all work on teams and projects can fail beyond your control. Also be aware that this failure rate doesn’t have to be on your resume; this is a method you are using to help guide your own thought process only.</p><p>If you’ve done a lot of professional dev work with significant project ownership over primary features of your products, start with your finger on the 75th percentile. How you should move your finger here has a lot more to do with how well you can make your case.</p><h2>Making The Case</h2><p>The basic process companies use when making an offer is pretty simple. You pass all the interviews, they want to hire you. All of your resume information is sent to a specific person whose job it is to rate you much like the process I described above for rating yourself. They are using the materials you provided, resume, cover letter, etc as well as the write ups from each of your interviewers and they plot you somewhere in their range. This person comes up with a salary and then passes it back to HR who writes up the offer. The HR person sends you the offer with this amount. At smaller companies, the person who decides your salary might also send you the offer.</p><p>Once you have received the offer, you have the opportunity to review and initiate salary negotiations if necessary. The most important thing to remember during this process is that any respectable company that has made you an offer won’t rescind it if you ask if the salary is negotiable. If they do, there is a strong likelihood will you not enjoy compensation review season at that company and them rescinding it is actually doing you a favor. You won’t get a better offer if you don’t ask for one and you won’t lose a good job by initiating salary negotiations. It’s still not easy to talk about for a lot of people and I get that. Just realize that the salary you agree to now will guide your raises for the rest of your time at this company and maybe even the next. It gets easier to talk about the more you practice and it can make a huge difference on your long term income.</p><p>Once you decide to initiate salary negotiations, the big mistake many people make here is to simply ask if the salary is negotiable. This is a mistake because they can easily respond with a “no” and you have forfeited your opportunity to reiterate your qualifications. When you wrote your resume and <a href="/blog/the-developer-cover-letter/">cover letter</a>, you had no idea what the company was looking for, what skills they needed to bring in an what kinds of problems they were facing with their products. If you used your interview Q&amp;A periods wisely, you now know the answers to all these things. You may have only addressed these things in a single bullet point on your resume (or maybe not at all) but now is the time to make these things shine. It shows a deep interest in the company to talk about their problems and how you are the answer, so when you ask to negotiate your salary, specifically include your relevant qualifications.  This will often be enough to get you a bump.</p><p>One last thing of note: the most influential leverage you can have in salary negotiations is competing offers. If you already have an offer in hand that is competitive with or better than the offer you just received, do not waste time, just tell them about it immediately along with a note letting them know you would still like an offer from them.</p><p>If a company refuses to budge on an offer that doesn’t meet your expectations, <strong>it’s okay to walk away</strong>. There are other companies that you may find are a better fit and offer compensation you’d be happier making.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Whether it’s your first position out of college or a more advanced, senior role, receiving a job offer in development is an exciting acco
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Talk About Yourself in an Interview</title>
    <link href="http://culture-of-development.com/blog/how-to-talk-about-yourself-in-an-interview/"/>
    <id>http://culture-of-development.com/blog/how-to-talk-about-yourself-in-an-interview/</id>
    <published>2017-04-27T16:00:00.000Z</published>
    <updated>2019-01-13T16:18:56.391Z</updated>
    
    <content type="html"><![CDATA[<p>When people ask me what they should know first about going into technical interviews, they get the same answer: <strong>be prepared to talk</strong>.</p><p>Interviews are stressful situations, and that stress can impact how well you communicate. You don’t think things through entirely. You don’t always make complete sentences. You laugh at really inappropriate times.  You get lost in tangents so far removed from the topic you can’t even remember what the topic is. And sometimes you just drop all your cards on the table in a show of desperation.</p><p>Preparing to talk isn’t about filling up time; it’s about prioritizing <a href="https://www.fastcompany.com/40404120/three-habits-of-the-best-job-candidates-ive-ever-interviewed" target="_blank" rel="noopener">what they need to know about you</a>. Flip the problem around and imagine you are hiring someone; what would you want to know about them? Here’s my list:</p><ul><li>What have you built?</li><li>What is the hardest technical problem you have run into?</li><li>How did you solve it?</li></ul><p>That’s it; those are the only types of questions that matter. Notice that all these questions are about the person being interviewed, specifically what they have done and how they did it. If you’ve been through interviews at some companies that are not as good at interviewing, then you probably had some questions on your list such as</p><ul><li>Where do you see yourself in 5 years?</li><li>Why do you want to work here?</li><li>How do you handle disagreements with coworkers?</li></ul><p>These are all worthless questions from the company’s perspective because predicting things is hard, especially when it’s the future. In all likelihood, the interviewer doesn’t know what they are looking for with these questions, and they are just being used to fill time. There is a caveat here however; I work for a company with an HR department that is responsible for taking care of some of the “would you actually work here if given an offer” questions (e.g. “are our benefits sufficient for you?”). If you’re applying for a very small company, you’re probably going to get asked these types of questions during the main interview.</p><h2>How to Prepare</h2><p>Get a stack of notecards.  On each notecard, write a title for a feature you worked on or a project you managed. Under the title you want a one sentence description of your main objective. Under that you want to list the most important tools that enabled the solution. Think of this as tags you’d put under a question on Stack Overflow. Under this, write down as many things you can think of that you tried and that <em>failed</em>; you can limit the list to 5 but don’t stop before you reach that number unless you actually tried fewer things (and that’s okay).  Underneath that, write down the thing that ended up working.</p><p>Now flip the card over. On the top, write down the single most valuable thing you learned from this project in a single phrase. You should list only the most critical insight to finding the solution to the problem. If you haven’t solved this problem yet, it should be the <em>most recent</em> insight you’ve had from it. Underneath this, write down one line about where this idea came from. Underneath that, repeat this process until the card is full.</p><p>I often hear people tell me they don’t know which features and projects their interviewers are going to want to hear about. They are going to want to hear about something in the materials that you gave them.  If you give them a resume, expect questions about stuff you worked on at your past jobs. If you gave them a link to your <a href="https://github.com/" target="_blank" rel="noopener">Github</a> profile, expect questions about your projects.  If you gave them a link to your Stack Overflow account, expect questions about some of your answers. Make sure you have at least one card for each job experience you have listed, and ideally one for each bullet point you have listed for each job experience. Make sure you have one for each Github project that you have worked on in the last year. For Stack Overflow questions, just make sure you’re familiar with your most popular questions and answers (no need to write whole cards for them). That about covers everything you might be asked about.</p><p>Here’s an example card for a project from <a href="https://stackoverflow.com/users/story/178082" target="_blank" rel="noopener">my Developer Story</a>.</p><p><img src="/img/resume-card.png" alt="Example Resume Card: Localizing the Careers Site"></p><h2>The Anatomy of a Good Developer Tale</h2><p>Now that you have the Spark Notes for everything you might talk about, it’s time to practice actually saying what you’re going to say in the interview. Even with all the knowledge you have on these cards, it’s crucial that you can channel that knowledge into an engaging story. Luckily, there’s a recipe for that too.</p><h2>Be Specific</h2><p>Good developer tales are conversation-based. It’s about transferring knowledge from me to you that you might find interesting or useful in your own work. Conversations tend to die when there are no more holes to plug, so preventing that is extremely important. While broad insights sound intriguing and might make you sound really intelligent, it’s important to remember the goal that we should be encouraging the interviewer to ask us more questions at every step along the way. The best way to do this is to be specific.</p><p><img src="/img/waynes-world-i-love-you-man.gif" alt="Wayne's World Meme"></p><p>^ This scene from Wayne’s World sums up exactly why you don’t want to say generic things. The person doesn’t know how to respond because you’ve given them no holes to try to plug.  If instead of saying “I love you, man,” he had said “I love your shirt, man!” then Garth could have easily continued the conversation knowing exactly what to talk about next. “Ohh yeah I got this at the concert in Reno where the drummer was on this crazy…” —you get the idea. Focus on specific insights, not general insights. Especially say what set of circumstances led you to that insight.</p><h2>Start with a Punchline</h2><p>Good developer tales start off with a punch line.  The point of the first sentence is to get the other person interested and hopefully guessing what’s coming next.</p><p>“I built a web interface for running developer insights reports,” is a bad punch line. There are basically two directions the interviewer can go here: “What’s developer insights?” or “What technologies did you use to build the interface?” Neither of those questions lead to interesting things that you have done. Developer insights is a whole group of people and now we’re not talking about you, and tons of people have used the front end web framework you built it with, but the interesting parts about the project are probably not related to the framework you used.</p><p>“I put 7 data sets on a Google Maps interface that allows a team of salespeople to get real-time reports about developer populations around the globe.” Now you’re probably wondering to yourself a lot of things, and they are all about the project work I did. We’re about to have a conversation because I used specific information that clearly identifies 3 to 4 interesting aspects of the project. That’s the difference between a punchline and any old way to talk about yourself.</p><h2>Talk Backwards</h2><p>In general, real stories are told chronologically backwards. This is why we start off with a punchline.  In contrast, practiced stories are told chronologically forwards.  It’s a solid indication as the interviewer that the person is reciting something they have committed to memory if they tell the story forwards, and in turn it’s significantly more likely that the story isn’t entirely true. <a href="https://www.stackoverflowbusiness.com/talent/resources/guide-to-interviewing-developers?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=dev-c4al&amp;utm_content=c4al-link" target="_blank" rel="noopener">Good interviewers</a> will force you to tell the story backwards because they will constantly ask you to expand on the parts they are interested in. If you actually know what happened and why it happened, this is not a problem for you because you are intimately familiar with the problem you are talking about. All you have to remember is where you left off in the main story so you can come back to it later.</p><p>If, however, the interviewer asks you to expand on something you have just said and you try to continue moving the story forwards, it’s a dead giveaway that you’re not being truthful with them. You might be talking about a decision someone else made in a manner that sounds like you made it, or you may have given the impression you know more about the inner workings of the tools you use than you actually do. These are not necessarily lies, but miscommunication isn’t fully truthful either. Not being truthful in an interview is not a good idea and it is extremely likely you will be caught if the company is any good at interviewing at all. I also want to point out that if you do get caught in this situation, it’s not a guaranteed failure of the interview. When you’re caught, the point is that you should feel encouraged to spend a little more time on your answers from then on out making sure you only talk about the stuff you have done. If you get caught twice that’s pretty much it.</p><p>So you’ve already given away the punchline, what do you say next? Your interviewer should lead you to the next thing, and they should lead you to expand on one of the 2-4 interesting things you packed into your punchline. Once they ask about some particular part, you refer back to your card and you only talk about the stuff that you tried that didn’t work. In large part, no one cares what the actual solution is; the journey matters so much more as a job skill than knowing the answer. It’s the difference between you being able to work through a problem vs. you just knowing the answer. In the case that you just knew the answer, the best thing to talk about is the components of the solution and how they all work together. But in large part, you’re being hired to work through problems, and that’s why you have to talk about the stuff you tried that didn’t work.</p><p>There is another side benefit of talking about the things you tried.  As soon as you say the punchline, the interviewer is going to start guessing how you solved this problem. You might have taken a different path than what the interviewer is thinking and because you talked about the path, now you get that all important knowledge transfer happening right there. Talk about their ideas, especially if you tried them. Make sure you focus on the key insights that led you to each next option. As the interviewer and as a developer, I genuinely enjoy learning a couple things in the interviews which leads to the next point…</p><h2>Don’t Guess What the Interviewer Knows</h2><p>In most cases you will have no idea what the interviewer knows. You have no idea what languages they are familiar with, what kinds of problems they are accustomed to solving, or what tools they have in their toolbox. There is a bit of a balancing act here. In order to use your time wisely, you have to assume they know some things. Assume they know what developers do for a living and that they know how to solve problems. Very regularly stop in the middle of your tale to make sure the interviewer is still following along. This can be done via body language, listening for sounds of agreement (the typical “yep” every so often from them while you are talking), or blatantly stopping to ask them if it all makes sense or if they would like you to expand on something.</p><p>If you get too far into a story without making sure they are still with you, it comes off to the interviewer that you cannot explain things well. Show an active interest in making sure the interviewer is understanding what you are talking about, and you will likely feel a lot more comfortable, and the interviewer will feel like they learned something.</p><p>A similar point here is not to make assumptions about what the interviewer finds interesting. Don’t talk negatively about any of the stuff that you have done because it might be the thing they think is interesting. Just because you think it’s simple or naive or whatever, you can still have a great conversation about it. Developers have hundreds of specializations these days and just because you’re applying to work at web dev position doesn’t mean the interviewer knows CSS or some javascript feature as well as you do. If the interviewer ever gets excited about something when talking to you, talk more about that in a very inviting manner.</p><h2>Force It to be a Conversation</h2><p>If it’s not obvious yet, force the interview to be a conversation. The reality is that you don’t actually know what your interviewer is going to find interesting in the materials you gave them or anything you might say, and I can’t tell you either. Do your best to make them excited about something you have done, and if they don’t bite, turn it around and ask them what they would like you to talk about. This is another case where being specific helps. “What do you want me to talk about?” is bad here;  “Is there something from my resume you thought was interesting?” is much better. It forces them to show their hand about their preparation for the interview as well. And if their answer is along the lines of “I didn’t see anything interesting,” then your immediate follow up question should be “then why I am in this interview to begin with?” Constantly trying to guess what the interviewer finds interesting is a waste of your time; it’s much more effective to just ask. If they don’t want to talk to you about specific things, they probably didn’t prepare for the interview themselves.</p><h2>Practicing</h2><p>Practicing for interviews is my favorite part. Just go talk to other developers about the stuff that you’ve done. Start with the punchline. Be specific, and when they ask you questions, talk about the things you tried in reverse chronological order.</p><p>Some things to remember: When you are talking to people, make sure you talk about 5-10 different note cards; one is not enough! You will have to go through 3-5 interviews for most companies; make sure you are not repeating the same stuff to different people because they will compare notes. Listen to the questions people ask you <a href="https://www.themuse.com/advice/how-to-prep-for-your-technical-interview-advice-from-a-hiring-manager" target="_blank" rel="noopener">when you’re practicing</a>. The questions you get during real interviews will be much the same and you basically train yourself to respond naturally by answering them a few different times. You should also pick up on the emotions of the people you’re talking to when you say things. Train your conversational muscle memory to say the things that make people excited and most eager to hear more.</p><p>Interest in the company hiring you is directly proportional to the interest the interviewers have in what you say. Telling stories is a very compelling way to build an interesting conversation with people you’ve just met. Hopefully you’ll find this recipe an effective way to practice telling stories and get a better response from your interview experiences.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When people ask me what they should know first about going into technical interviews, they get the same answer: &lt;strong&gt;be prepared to ta
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>A Developer’s First Steps to Finding a New Job: Part 4, Managing Imposter Syndrome</title>
    <link href="http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/"/>
    <id>http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/</id>
    <published>2017-03-02T17:00:00.000Z</published>
    <updated>2019-01-13T15:45:30.941Z</updated>
    
    <content type="html"><![CDATA[<p>We’ve discussed <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">knowing what it is you truly need</a> in your career, <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">working with recruiters</a>, and <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/">understanding cost centers vs profit centers</a>. This brings us to what I see as1 the final “first step” any developer should take in looking for a new job: overcoming imposter syndrome.</p><h2>Imposter syndrome</h2><p>The absolute hardest part of being a developer is the constant feeling that you aren’t good enough. Impostor syndrome, the tendency to devalue your own work and become overwhelmed with the fear that you’ll be exposed as a “fraud,” is probably the single largest mental roadblock across all developers. It tends to exacerbate any other anxiety related issues you might have and can send you to some dark places from time to time. I don’t have good news here; it’s simply part of the game. You have to be able to manage your own self image of failure.</p><p>The idea of imposter syndrome is vital to understand as you begin your job search; you need to know that <strong>it’s not your job to decide whether or not you can fill the role, it’s the company’s job to determine if you can fill the role</strong>. Keep that fact at the top of your mind every time you find yourself hesitating to apply for a job you’d really love to do, but are afraid you’re not good enough for.</p><p>Find the SourceThe first step in getting a grasp on this issue is to identify the source of it. In my experience the feeling that you don’t know what you’re doing comes from two places: you see someone do something, and you can’t figure out how they did it, or you set an expectation for yourself and fail to meet it. Once you’ve established the source of your imposter syndrome, the second step is to set up a plan for overcoming the feeling.</p><p>When you see someone do something and you can’t figure out how they did it, you have to devote yourself to figuring it out. One of my most effective means of this is to simply email the person who did it and ask them how they did it. One of the greatest things about being a developer is that knowledge is not usually seen as something to conceal, but rather something to share. You’ll be surprised how often there is a blog post detailing the thing, the reason it came to be needed, and the process that was used to figure out the solution. Or the person will just email you the equivalent because <em>being asked</em> to share your knowledge is also one of the most empowering feelings you can have as a developer. And after all—developers sharing their knowledge is what Stack Overflow is built on.</p><p>In any case, don’t stop at knowing the high level details; make sure you actually implement it. Practicing the craft is the only way to truly know that you can do it. Just knowing the details of how it was done isn’t enough. Be ready to devote yourself to a life of learning.</p><p>The more devastating form of feeling like you’re not good enough is when you set expectations for yourself and fail to meet them. In all likelihood your expectations of yourself were influenced by your boss or coworkers or teachers. Failing to meet their standards is extremely frightful because they are the ones responsible for judging your ability and awarding your compensation accordingly. It is extremely difficult to temper expectations in others without feeling like you’re actually still failing.</p><p>In my experience, most of my anxiety from this form is due to assumptions I made about what the expectations were, and those assumptions turned out to be false. Either <img src="/img/Rubber_duck_assisting_with_debugging-300x300.jpg" class="inline-content-image-left" title="Rubber duck on laptop"> my assumptions about the order to build things in was rubber ducky debugging wrong or my guess as to what issues would come up when changing a system were wrong. Sometimes it’s that I simply can’t debug a problem because my expectation about the output is wrong, and I can’t figure out why.</p><p>The first thing I do in every case is try to explicitly state my assumptions and double check that I’m on the same page with anyone else who should share these expectations. In the case that it’s just me, I’m a practitioner of <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging" target="_blank" rel="noopener">rubber ducky debugging</a>.</p><p>This process is by no means a complete solution, however, and I still regularly go through the highs and lows of meeting and missing my own expectations.</p><h2>Don’t cut yourself off at the knees</h2><p>Remember: <strong>it’s not your job to decide whether or not you can fill the role, it’s the company’s job to determine if you can fill the role</strong>. We tend to avoid any job we perceive as being above our skill set, without even giving the company a chance to evaluate us.</p><p>Don’t cut yourself off at the knees by only applying to jobs with titles that don’t trigger imposter syndrome. Especially don’t let insecurity limit you to only searching for “entry level” or “junior” jobs. Often times jobs listed as entry level are not even actual developer jobs; they are analyst jobs (writing functional specs) or recruiter spam looking for new candidates to pass on to other companies. It’s okay to apply to junior or entry level jobs, but don’t limit your search to <em>just</em> those jobs-—whatever your skill level.</p><p>Take stock of your own self-evaluation and its inherent flaws, and remember that your only job is to represent yourself clearly and honestly, the best you can. If you’re truly not qualified for a position, the company or recruiter will let you know that and you can move on.</p><p>That concludes the foundation for finding a job that’s a good fit for you. It’s incredibly important to know yourself and what you’re getting into. I cannot ignore the benefit of having two years of experience in this field, so if you’re looking for your first job, I do encourage you to prioritize getting the experience over getting a lifelong job. But as soon as you have the experience, make sure you’re constantly updating the <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">answers to your questions</a> and <a href="https://stackoverflow.com/jobs?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=dev-c4al&amp;utm_content=c4al-link" target="_blank" rel="noopener">start the search</a>.</p><p>I hope you’ve enjoyed this 4-part series and that it’s given you some new tools in your job search. I’ve worked with a lot of developers in job hunting and these are the steps that I’ve determined are the most effective and important things any developer should do in looking for a new job.</p><p>Ready to start your search? Kick it off today at <a href="http://stackoverflow.com/jobs" target="_blank" rel="noopener">Stack Overflow Jobs</a>.</p><hr><p>Read the full series:</p><ul><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">Part 1: Know Yourself</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">Part 2: Working With Recruiters</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/">Part 3: How Companies View Developers</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/">Part 4: Managing Imposter Syndrome</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We’ve discussed &lt;a href=&quot;/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/&quot;&gt;knowing what it is you truly need&lt;/a&gt;
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>A Developer’s First Steps to Finding a New Job: Part 3, How Companies View Developers</title>
    <link href="http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/"/>
    <id>http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/</id>
    <published>2017-02-27T17:00:00.000Z</published>
    <updated>2019-01-13T15:59:45.083Z</updated>
    
    <content type="html"><![CDATA[<p>In parts 1 and 2 of this series we explored <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">knowing what it is you really want</a> and <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">working with recruiters</a>. This week’s is a little bit of an extension of part 1: do you want to work in a cost center or a profit center?</p><p>In accounting, every department within a company is classified as either a cost center or a profit center. A <strong>cost center</strong> is a department that’s primarily identified by its costs to the company; a <strong>profit center</strong>, naturally, is one that’s primarily identified by the revenue it brings in.</p><p>If you work for a software company, developers are building the product that makes the company money — they’re a profit center.</p><p>But what if you don’t work in software? What if you build software for a banking company, or an insurance company? These days developers are working in all kinds of fields, and that’s great. But you need to be aware if your company isn’t seeing you as driving profit, but rather as sucking resources — a cost center.</p><p>Does this mean you can’t be happy working in a non-software company? Of course not. But this is something you need to take into consideration when you’re searching for a new job. Are you ok working somewhere where you’re seen as overhead? Or do you need to be driving revenue and building a product that is the backbone of the business?</p><h2>Cost Centers Versus Profit Centers</h2><p>The difference is in the mindset of decision makers answering questions when developers need something to get their job done. If a developer wants a second monitor, cost center logic says, “Well, once that person gets a second monitor, everyone is going to want a second monitor, and that’s going to cost us more than we budgeted for developers this year.” So no, you can’t have a second monitor; but they might consider it for the budget for next year. By contrast, profit center logic says, “Will a second monitor help you work faster or more efficiently? Will you be a more effective driver of revenue? Great. Here’s your tracking number; it’ll be here in 2 days.”</p><p>While it might sound crazy to ever think working in a cost center could be enjoyable, just remember that the number of times this kind of situation comes up is typically only once or twice a year because you’ll get used to working on whatever you’ve got before too long anyway. Equipment does go bad and upgrades do need to happen, and licensing for tooling does need to be updated regularly, but most cost centers are aware of those kinds of things. It’s when you want a new book or a special piece of hardware or an event ticket when these kinds of situations come up. People can be happy under both methodologies, <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">just be aware of your needs</a>.</p><hr><p>Read the full series:</p><ul><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">Part 1: Know Yourself</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">Part 2: Working With Recruiters</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/">Part 3: How Companies View Developers</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/">Part 4: Managing Imposter Syndrome</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In parts 1 and 2 of this series we explored &lt;a href=&quot;/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/&quot;&gt;knowing w
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>A Developer’s First Steps To Finding a New Job: Part 2, Working with Recruiters</title>
    <link href="http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/"/>
    <id>http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/</id>
    <published>2017-02-21T17:00:00.000Z</published>
    <updated>2019-01-13T15:14:52.625Z</updated>
    
    <content type="html"><![CDATA[<p>Last week I kicked off a series on a developer’s first steps to finding a new job. My first post was about examining your own needs before you start looking—an obvious-sounding first step that so many of us unwittingly skip. You can read that <a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">here</a>.</p><p>Today we’re looking at Step 2: Working with Recruiters.</p><p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Microsoft acquired LinkedIn for $26B. The synergies are endless! <a href="https://t.co/h4GY25XLHw" target="_blank" rel="noopener">pic.twitter.com/h4GY25XLHw</a></p>&mdash; DEV Community 👩‍💻👨‍💻 (@ThePracticalDev) <a href="https://twitter.com/ThePracticalDev/status/742343361483448320?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">June 13, 2016</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>If you’re a developer, you probably don’t get warm fuzzy feelings when you hear the word “recruiter.” Just look at the top results from a Google search for “developers and recruiters”:</p><p>…along with this useful “related searches” gem:</p><p><img src="/img/devs-and-recruiters-related-searches.png" alt="Google related searches showing &amp;quot;recruiters are scumbags&amp;quot;"></p><p>Inevitably you will end up dealing with recruiters as part of your job search. Contrary to the aforementioned Google results, this isn’t a bad thing; recruiters are actually quite helpful in most cases with helping you get some of your early questions answered.</p><p>But to make the most of your interactions with recruiters, what you really need to know is the difference between retained recruiters and contingency recruiters as well as how you can expect to work with each. Learning this will save you time and a lot of anxiety.</p><h2>Retained Recruiters</h2><p><strong>Retained recruiters</strong> are employed by a company to hire people for that company. They’re generally salaried employees who have the company’s best interests in mind and want to find the best possible match for a given role.</p><p>When you work with a company that uses retained recruiters, they will often make themselves a barrier between you and the people you will end up working with. It’s their job to make sure the constraints of an offer don’t include obvious blockers for candidates they screen. If they can see upfront it wouldn’t be a fit, they will prevent the company from wasting time and money interviewing you.</p><p>Do you need to bring your dog to work? If they don’t allow dogs because some of your potential coworkers have allergic reactions to even the sight of dogs, the recruiter will likely screen you out. The policy isn’t going to change just because they want to hire you. Want to wear sandals and shorts to the office, but they require business casual? Well, that’s not likely to change for you either. Want to work in a private office, but they use an open floor plan? Certainly not going to change. You get the point: The recruiter has constraints in that they can only offer you what the company has to offer.</p><p>This is a positive thing because it keeps you from wasting your time as well. When you move forward in the hiring process, you can be relatively confident that you and the company are on the same page in terms of what they can offer you. Have you ever gone through round after round of interviews only to be offered a job you can’t accept because the salary’s too low, the benefits don’t fit your needs, or you’re not willing to relocate? Yeah. Retained recruiters are there to prevent that from happening. And when you are hired by a company using retained recruiters, it’s generally a long term investment on their part because they want you to be successful there in order to make the company more successful.</p><h2>Contingency Recruiters</h2><p><strong>Contingency recruiters</strong> are people hired by companies to send candidates to the company. They are contractors, not salaried employees, and they do not get paid unless the company hires one of the candidates they send in. The amount they get paid is typically a percentage of the hire’s yearly salary, due upon six months of continuous employment. They are, essentially, salespeople working on commission, and you are the product. For the most part, all those articles above about why developers hate recruiters are about contingency recruiters.</p><p>Some signs that you’re working with a contingency recruiter:</p><ul><li>They ask for your resume in Word doc form because they are going to edit it.</li><li>They don’t mention the name of the company they want to hire you for because you could simply go straight to that company, and they could miss out on the fee.</li><li>They simply won’t work with you if you’re going to be hard to sell, so if you have less than two years of experience, belong to certain (tech industry) minority groups, have location issues, etc, you are going to be told they don’t have any clients looking for your skills.</li><li>They don’t ask you about yourself; they just send spam with job descriptions.</li></ul><p>Contingency recruiters have their own best interests in mind. To them, a placement is the primary goal, not whether you’re the best fit, and not whether the company is the best fit for you. Simply getting a candidate placed in a job is far more important than the salary, for example, because they are going to only get a slightly bigger check in six months if they fight for a larger salary for you. Instead they will often tell you to take whatever offer you get the first time and don’t take risks that might possibly lose you the job (and them their commission).</p><p>This isn’t to say you should not work with contingency recruiters; you can still find a good long term job that satisfies all of your needs through this type of recruiter. Just be aware of what you’re getting yourself into when you choose to work with one, and tread carefully.</p><p>The fact is, you can’t escape recruiters. Companies are looking for talent, and recruiters help them find it. If the company you want to work for doesn’t have full-time retained recruiters on staff, you may have to work through a contingency recruiter. But being informed and educated about what that means can help you keep your own best interests in mind throughout the process.</p><hr><p>Read the full series:</p><ul><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">Part 1: Know Yourself</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">Part 2: Working With Recruiters</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/">Part 3: How Companies View Developers</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/">Part 4: Managing Imposter Syndrome</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last week I kicked off a series on a developer’s first steps to finding a new job. My first post was about examining your own needs befor
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>A Developer’s First Steps To Finding a New Job: Part 1, Know Yourself</title>
    <link href="http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/"/>
    <id>http://culture-of-development.com/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/</id>
    <published>2017-02-14T17:00:00.000Z</published>
    <updated>2019-01-13T14:57:00.936Z</updated>
    
    <content type="html"><![CDATA[<p>When a developer first begins to consider moving jobs, most of us start by firing up some job boards and checking out the options. The thing is, most of us don’t actually know what we’re looking for. When I looked for my first job, I thought, “Hey, I’m just looking to see what’s out there.” Eventually I took one of the offers, but I was soon disappointed with my situation. My needs were not being fulfilled, and my most effective work style was not an option at that company. I loved the people that I worked with there and still keep in touch with a few, but outside of that it was basically a waste of my time and ability.</p><p>That’s why I believe it’s really important to take a few basic steps before charging ahead into the job hunt. A little planning will always bring better results in the long run, especially if you’re looking for a role that you can grow in and enjoy for years to come. It’s well worth taking a little time upfront to prepare.</p><p>I’ll be writing a four-part series starting this week about what steps all developers should take before <a href="https://stackoverflow.com/jobs/front-end-developer-jobs?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=dev-c4al&amp;utm_content=c4al-link" target="_blank" rel="noopener">applying for a new job</a>. Today we’re going to look at what I see as Step 1: Know Yourself.</p><h2>Know Yourself</h2><p>Understanding your needs is the real first step in finding a job. I know this sounds obvious, but the reality is that you’re probably not thinking about all of your needs; you’re probably just thinking about the ones that most desperately need to change. If you hate your boss, that can cloud everything else until all you care about is finding a new boss. But ignoring other needs will typically lead you right back down that same path, making one thing better but still leaving you in a situation in need of major improvement.</p><p>There are lots of kinds of needs: emotional needs, security needs, respect/acknowledgement needs, autonomy needs, etc. Many of these overlap, but when you’re looking for a job there are basically two buckets you need to evaluate: Will you be satisfied with the work you will be doing, and will you be satisfied with the benefits you’ll receive? If either of these is unsatisfied, you can expect to find yourself dissatisfied in short order.</p><h2>Will the work satisfy my needs?</h2><p>The following are questions you should be able to answer about yourself at any point in time, in priority order, so that you can determine whether or not a prospective company fulfills your needs.</p><ul><li>What tools am I confident in using?</li><li>What kinds of problems do I want to work on?</li><li>What kinds of problems are challenging to me?</li><li>How much responsibility do I want in the full product chain for my features?</li><li>What size team do I work best with?</li><li>What kind of environment do I work best in? (e.g. open floor or private office)</li><li>How much time do I need to explore new stuff?</li><li>How often do I need feedback?</li></ul><h2>Will the benefits satisfy my needs?</h2><p>You should also be able to answer and prioritize the following questions.</p><ul><li>How much money do I need (not want) to make?</li><li>What kind of health benefits do I need?</li><li>How do I learn new things effectively?</li><li>How much time do I need to myself?</li><li>What’s the furthest I can be separated from my spouse/kids/dog/etc and for how long?</li><li>What kinds of tools do I need to get things done efficiently?</li><li>What am I comfortable wearing when I work?</li><li>What time of day do I work most effectively?</li><li>How many side projects do I need to maintain?</li></ul><h2>Write it down</h2><p>Note that all of these questions are introspective. You should answer these questions before you start your search, not mold your answers to your available options. When you’re looking to fix one thing about your current job — working for literally anybody but your current boss — you might not take care of the core issue. Perhaps there are other, institutional and cultural problems that have led you to feel this way that you’re overlooking. Or you might give up a previously satisfied need in the process. You might miss out on the bigger picture. Changing jobs is a life changing decision and life changing decisions should get extra attention. It might not be easy, but perhaps <a href="http://stackoverflow.blog/2017/01/Benefits-for-Developers-from-San-Francisco-to-Sweden/" target="_blank" rel="noopener">changing cities, for example, <em>is</em> the best thing for you</a>.</p><p>As you read through these lists, I hope you find a thing or two you would not have previously thought about, and I hope that you thought about a thing or two that’s not on these lists. The way to go about developing your own list is straightforward. Start by writing down specific events that either boosted your satisfaction greatly or reduced your satisfaction greatly. <strong>Actually write them down in a notebook that you keep somewhere safe and readily available.</strong> Write down these experiences when they happen. Occasionally, say every month when you’re just getting started and every six months once you have a good baseline, go through your experiences and use them to update your answers to these questions. When one of your experiences makes you think of a new question to answer, just add it to the list and answer it.</p><p>Your answers to these questions are going to change over time, and that’s good because it means you’re developing a greater understanding of your needs, and your life is probably changing as well. Getting older might mean finding a partner, adding kids or other dependents to your life, needing more space to store all the stuff you accumulate, changing priorities in terms of what you want to accomplish in this world and whatever else; you do you.</p><hr><p>Read the full series:</p><ul><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-1-know-yourself/">Part 1: Know Yourself</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-2-working-with-recruiters/">Part 2: Working With Recruiters</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-3-how-companies-view-developers/">Part 3: How Companies View Developers</a></li><li><a href="/blog/a-developers-first-steps-to-finding-a-new-job-part-4-managing-imposter-syndrome/">Part 4: Managing Imposter Syndrome</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When a developer first begins to consider moving jobs, most of us start by firing up some job boards and checking out the options. The th
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>The Developer Cover Letter</title>
    <link href="http://culture-of-development.com/blog/the-developer-cover-letter/"/>
    <id>http://culture-of-development.com/blog/the-developer-cover-letter/</id>
    <published>2016-11-11T17:00:00.000Z</published>
    <updated>2019-01-13T14:35:00.571Z</updated>
    
    <content type="html"><![CDATA[<p>Your cover letter is usually the first impression you make to the people at a company. Even if you got your foot in the door with one person, a bunch of people are going to see your cover letter and resume before you actually get hired, and that’s going to be your first impression with many of those people. First impressions matter a lot.</p><h2>First impressions matter</h2><p>For instance, as a developer, you have probably opened up your email at one point or another and found a message that looks like this:</p><blockquote><p>Subject: Exciting Startup-Full Stack Developer Needed</p><p>Hi [perhaps your name but maybe someone else’s],</p><p>I came across your profile and feel with your background you would be a great fit for an exciting Full Stack Developer position I have available with one of my top clients. It is a well funded company in a lucrative space, with an exciting and challenging work environment. I would love to chat with you about this opportunity a bit more.</p><p>I can be reached at j.doe@recruiters-r-us.com or at 555-123-4567.</p><p>Jane Doe</p><p>555-765-4321 | jane.doe@gmail.com</p></blockquote><p>I remember the first time I got an email like this I was actually pretty excited; it felt like a bit of validation for me as a developer and so I called them back. I was immediately told I didn’t have the required work experience that they were looking for.</p><p>Today I know better, because I know what to look for. So what are the problems with this first impression?</p><ul><li>The biggest problem is that this message could be sent to anyone. It is not specific to me in any way, shape, or form.</li><li>It doesn’t tell me what I’d be doing if I got this job.</li><li>It doesn’t address my individual needs at all.</li><li>Does this recruiter have non-top clients? To whom do they send those jobs? Why am I even thinking about this?</li><li>I’d like to look up some more information about this client to see if I’m interested… but I can’t because it doesn’t say who the client is.</li><li>Why are there conflicting pieces of contact information?</li><li>And (to a lesser degree of importance) it comes off as “we so bad, if you wanna be bad come try to join us.”</li></ul><p>This small email is full problems; it makes a horrible first impression, and I never want to hear from Jane Doe again. If Jane wants to do a better job, she needs to start fixing those problems. First impressions are important, and this works both ways.</p><p>When you reach out to a company, you want to tell a story about how you are going to fulfill their needs. The resume alone usually doesn’t do this because it’s all about you, and the cover letter alone doesn’t do this because there’s nothing to back it up. Resumes have a fairly standard format that makes them easy to scan and consume, but they don’t always tell the right story for the company by themselves. The cover letter is the best place to start the story you want to tell to each specific company.</p><h2>Figuring out what to say</h2><p>So what goes into a cover letter and how do you start to tell a story with it? This comes down to understanding the needs of the company. Why are they hiring? What skills are they lacking in? What problems are they trying to solve? Painting a picture where you are the answer to any of these questions is much more likely to get you a call back than a generic cover letter that says the exact same thing as your resume. Let’s look at each question a little more in depth to help you get an idea of the direction we might take.</p><h2>Why are they hiring?</h2><ul><li>Did someone quit and they need to replace them?</li><li>Are they always hiring so they don’t miss out when smart people come around?</li><li>Do they have too many ideas and need more people to implement them?</li></ul><h2>What skills are they lacking in? What problems are they trying to solve?</h2><ul><li>Do you know some tools that you could teach their team?</li><li>Do you have domain knowledge related to their problems?</li><li>Are you passionate about their mission?</li><li>Do you have leadership experience?</li><li>Can you add a new perspective to their team makeup?</li></ul><p>This is the part that most people find the hardest. You cannot tell a story where you solve the company’s problems without knowing the company’s problem, and that means <em>you have to do research</em>—at the very least you have to know what products they have and what they are hiring for—<em>on every company you send an application to</em>.</p><h2>What bad cover letters look like</h2><p>Many of the cover letters we see look like this:</p><blockquote><p>Dear Sir or Madam:</p><p>I would like to submit my resume for your consideration regarding the position of Site Reliability Engineer (SRE). I feel that my experience will be a great fit for Stack Overflow. In addition to many years of experience with the Microsoft .NET stack, I also have experience in a variety of other languages. This background makes we a well rounded developer, and enables me to bring fresh perspectives to problems and tasks.</p><p>Thank you,</p><p>Nick Larsen</p></blockquote><p>Hopefully by now you are starting to understand why this is not a good first impression. If I replace the name of the company and the name of the job, I can use this cover letter to apply for just about any developer job, which makes my first impression that of “any developer.” This lacks personalization to the company; it does not address their problems, it does not indicate that I actually want to work there, and the only thing it tells the company about me is that I know the Microsoft stack and some other unspecified languages which may or may not be applicable to what they are working on.</p><p>Basically this is just benign. This doesn’t trigger a negative response from the reader but it does not trigger a positive response, either. This is just another resume I’d toss on the maybe pile—or just throw in the trash if the maybe pile was full today.</p><h2>An outline for a good cover letter</h2><p>Let’s get back to the good stuff. Once you know the story you want to tell, you have to materialize it into words. This is typically not that hard, but it can be frustrating figuring out where to start. The solution is that all cover letters need to follow <strong>a simple two paragraph format</strong>:</p><h2>The first paragraph tells the company why you want to work for them.</h2><p>You have one of two options: you either want to work with the people who work there, or you want to work on the problems they are solving. If you’re truly in love with both, mention both, but only one is necessary. Once you have written down that you want to work there, back it up with a single <strong>specific</strong> reason why.</p><p>Why a <strong>specific</strong> reason? Because it tailors the resume to them, showing you have done some amount of research on the company and decided that you actually want to work there. It’s much more impactful than just applying because you saw a job listing. When a company thinks you want to work there, it really eases their decision because all else being equal between two candidates, they are going to go with the one who wants to be there. And wanting to be there can often outweigh even stronger candidates because you have shown shared goals.</p><h2>The second paragraph tells the company why they want to hire you.</h2><p>This is where you start telling the story you want to tell, and you have to keep it short, around three sentences maximum, regardless if you’re applying for junior or senior positions. The real goal of your story is to convince the company you can fulfill their needs. Highlight the exact things you want to bring to the company, whether it’s knowledge of some tech, domain knowledge, a process you follow, or whatever else you think might work to help solve their problems. And again, back it up with a <strong>specific</strong> example. These specifics are important because they demonstrate capability early in the hiring process instead of leaving it up to the reader to figure it out for themselves.</p><p>Here’s an example cover letter that hits all of these points. It clearly states why I want to work there and backs that up with a specific example. It addresses the company’s needs by showing a specific example of how I proactively addressed some major problems at my previous job that are applicable to the job I’m applying for. It keeps it short and to the point.</p><blockquote><p>Hello Stack Overflow,</p><p>I’ve used Stack Overflow for as long as I’ve been a developer, and I recently came across a post about the architecture of your products on Nick Craver’s blog. It made me think, “I really want to work with these people who care so much about what they do.” I’m super excited to hear about all the tools you have built to make developer processes more streamlined; that’s right up my alley.</p><p>At my current job I started out as a web dev, but I was constantly blocked by broken builds and the multi-step process for getting code out to production. I took it upon myself to fix this by prototyping a continuous integration system that eventually turned into the system our team still uses today. As we’ve started to grow, I’m focusing a lot more of my time on monitoring systems and currently evaluating some possible solutions.</p><p>I look forward to hearing from you soon,</p><p>Nick Larsen</p><p>[contact email] [contact phone number]</p></blockquote><p>If we’re supposed to tell a story, why does the cover letter need to be short? The reality is that recruiters are not looking at just your resume today. They are probably looking at 100 resumes today and optimistically that gives you about 2-3 minutes to make your impression strong enough to get added to the call back pile. If it takes longer than that for them to read your cover letter, they will never look at your resume or anything else that you included with your application. Keep it short.</p><p>To recap, yes, it takes a lot longer to write a good cover letter than to write a cover letter template that allows you to just replace the name of the company and the job. Will you get a call back on every application you send following this template? No, but you will see a significant increase in the percentage of companies that call you back when following the personalized template I have outlined here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Your cover letter is usually the first impression you make to the people at a company. Even if you got your foot in the door with one per
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Build Your First Thing With WebAssembly</title>
    <link href="http://culture-of-development.com/blog/build-your-first-thing-with-web-assembly/"/>
    <id>http://culture-of-development.com/blog/build-your-first-thing-with-web-assembly/</id>
    <published>2016-06-24T22:48:56.000Z</published>
    <updated>2016-06-25T16:01:32.743Z</updated>
    
    <content type="html"><![CDATA[<p>When I first heard of <a href="https://webassembly.github.io/" target="_blank" rel="noopener">WebAssembly</a> it sure sounded cool and I was super excited to start trying it out.  As soon as I tried to get started however, it got a lot more frustrating.  My goal here is to save you some of that frustration.</p><p><img src="/img/cliff.jpg" alt="beware of cliff"></p><h3>Reader beware</h3><p>This post was written in June 24th, 2016.  WebAssembly is a very new and unstable technology and everything in this post might be wrong as the process continues to standardize it for all browsers.</p><p>With that out of the way....</p><h3>What is WebAssembly?</h3><p>Well the official website describes it as:</p><blockquote><blockquote><p>WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.</p></blockquote></blockquote><p>Uhh... wat?  Format what?  Text?  Binary?  Frankly this is just a bad description.  So instead, get out your buzzword bingo cards and I'll wrap up all my experience with wasm and come up with my own description:</p><blockquote><blockquote><p>WebAssembly or wasm is a bytecode specification for writing performant, browser agnostic web components.</p></blockquote></blockquote><p>So we're still not quite to the point of sounding totally awesome with a quip, but here comes the rest of the elevator pitch.  WebAssembly realizes performance gains by using statically typed variables which are much more efficient to reference than dynamically typed varaibles at runtime.  WebAssembly is being developed by a <a href="https://www.w3.org/community/webassembly/" target="_blank" rel="noopener">W3C Community Group</a> to eventually be supported by all spec compliant browsers.  And the killer feature, <em>eventually</em> you'll be able to write these web components in <em>any</em> language.</p><p>Sounds a lot cooler now, doesn't it?</p><h3>Let's get started</h3><p>When it's time to learn a new thing, I usually look for the smallest possible example to see it working.  Unfortunately for us all, that's not a reality with WebAssembly.  In it's current state, wasm is basically a specification for bytecode.  Imagine if back in 1996, some engineers from Sun Microsystems introduced the JVM... but no Java.  I imagine that conversation going a little like: &quot;Hey y'all, come check out this bytecode executing virtual machine we made!&quot; &quot;Cool! How do we write code for it?&quot;</p><p><img src="/img/jvm-bytecode.png" alt="HelloWorld.class"><em>HelloWorld in bytecode</em></p><p>&quot;Uhh.. cool man.  I'll check it out sometime.&quot; &quot;Awesome, let us know what you think and drop us a line on our github page if you run into any trouble.&quot; &quot;You got it, we're gonna check out some of the other projects over here now.&quot;</p><p>And even that's a bad example because the JVM is based on the Java language, but hopefully you get the point.  If your byte code doesn't show up on the scene with tools that compile to it, you're gonna have a hard time getting off the ground.  So how do we actually get started then?</p><h3>What came before WebAssembly</h3><p>Most technology is the result of innovation, especially when a reasonable attempt is being made to make it a formal specification.  Wasm is no different, it is effectively a continuation of the work done on <a href="http://asmjs.org/" target="_blank" rel="noopener">asm.js</a>, a specification for writing javascript components in a way that can be compiled with static typing.  Wasm extends those ideas by writing a specification for bytecode that can be targeted by a compiler of any language, sent over the wire as a binary file instead of text encoding and developed over time by representatives from many of the major browsers instead of just Mozilla.</p><p>asm.js is just a specification for writing javascript using a minimal subset of the language features.  You can write simple asm.js by hand, and if you just want to get your hands dirty, it's definitely the way to start.  (it's best to put this in it's own file for later on, and the convention is to use <code>your-module-name.asm.js</code>)</p><pre><code>function MyMathModule(global) {    &quot;use asm&quot;;    var exp = global.Math.exp;    function doubleExp(value) {        value = +value;        return +(+exp(+value) * 2.0);    }    return { doubleExp: doubleExp };}</code></pre><p>This isn't a particularly useful function, but it is to spec.  If it looks silly to you, you're not alone, but almost every character there is necessary.  All of those unary <code>+</code> operators act as type annotations for the compiler so it knows that they are doubles and doesn't have to figure out what they are at runtime.  It's super finicky but if you mess something up, the console in firefox will give you a reasonable error message to work off of.</p><p>If you want to use it in a browser, something like this works:</p><pre><code>var myMath = new MyMathModule(window);for(var i = 0; i &lt; 5; i++) {    console.log(myMath.doubleExp(i));}</code></pre><p>And if you got all that correct, the output should look something like this:</p><p><img src="/img/asmjs-success.png" alt="asm.js success"></p><h3>Get to the WebAssembly already</h3><p>Now that we have a working piece of asm.js, we can use the tools provided by the <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener">WebAssembly github page</a> to compile it to wasm.  Now you have to clone the repo and build the tools yourself.  This is the worst part.  These tools are under constant development and it's a common occurrence that they break from time to time, especially if you're on windows.</p><p>You're definitely going to need make and cmake with commandline tools installed on your system regardless of whether you're on windows or mac.  If you're on windows, you'll also need a version of visual studio 2015 installed.  If you're on a mac, follow <a href="https://github.com/WebAssembly/binaryen#building" target="_blank" rel="noopener">these instructions</a>, and if you're on windows, follow <a href="https://github.com/brakmic/brakmic/blob/master/webassembly/COMPILING_WIN32.md" target="_blank" rel="noopener">these instructions</a>.</p><p><img src="/img/binaryen-windows-build.png" alt="building binaryen"><em>Building binaryen on windows</em></p><p>Distributing working binaries would be a huge step in the right direction for the WebAssembly team.</p><p>If you managed to get through this successfully, a bin folder was created in the binaryen directory with some tools we can use to convert our asm.js to wasm.  The first tool is <code>asm2wasm.exe</code>.  This tool compiles the asm.js code to <code>.s</code> format code, which is a textual representation of the abstract syntax tree (AST) for the wasm output.  Once you run the utility, you end up with something that looks like this:</p><pre><code>(module  (memory 256 256)  (export &quot;memory&quot; memory)  (type $FUNCSIG$dd (func (param f64) (result f64)))  (import $exp &quot;global.Math&quot; &quot;exp&quot; (param f64) (result f64))  (export &quot;doubleExp&quot; $doubleExp)  (func $doubleExp (param $0 f64) (result f64)    (f64.mul      (call_import $exp        (get_local $0)      )      (f64.const 2)    )  ))</code></pre><p>In the future we can disect this line by line, but for now I just want to show it to you and mention that since wasm is a binary format, right clicking and viewing source like you can do for any javascript today just doesn't work; it would look a lot like that byte code up top.  The current plan is that when you view source on a wasm module, it would disassemble to this format to make it human readable.</p><p>The next thing we need to do is convert this <code>.s</code> format code to a wasm binary, and to do that we use <code>wasm-as.exe</code>, for wasm assembler.  Once you run this file, you'll end up with the actual wasm bytecode we need for the browser.</p><p><img src="/img/binaryen-transform.png" alt="building wasm from asm.js"><em>transforming asm.js to a wasm binary</em></p><p><img src="/img/wasm-bytecode.png" alt="wasm bytecode"><em>wasm bytecode</em></p><p>Next, grab yourself the latest copy of <a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank" rel="noopener">Firefox</a> or <a href="https://www.google.com/chrome/browser/canary.html" target="_blank" rel="noopener">Chrome Canary</a> and enable WebAssembly.</p><p>For Firefox, you'll need to go to <code>about:config</code> in the url bar, and then tell it you'll be careful.  After that, type <code>wasm</code> in the search bar and double click <code>javascript.options.wasm</code> until the value is set to <code>true</code> and then completely restart the browser.</p><p>For Chrome Canary, you'll need to go to <code>chrome://flags</code> and scroll down until you find <code>Experimental WebAssembly</code>, click the enable link and completely restart the browser.</p><p>The last step is get the module running in the browser.  This was another pain point when I first started because it's totally hidden.  I couldn't anything in the spec related to the javascript API for using wasm modules.  I ended up just opening up a console in Chrome Canary and typing <code>WebAsse</code> and nothing popped up.  Next I tried typing <code>Was</code> and then it popped up!  Looking at that object in the inspector was about the poorest documentation ever, but then it occurred to me to use some other tools (emscripten) that compiles to wasm.  How I did that is the topic of another blog post, but after doing that I was able to create a working example.</p><p>Some time later I was clicking around and eventually ended up in the design repo for WebAssembly.  There I saw a file named <a href="https://github.com/WebAssembly/design/blob/master/JS.md" target="_blank" rel="noopener">JS.md</a> so I clicked on it and sure as shit, there was an actual javascript API with documentation.  Pay close attention to the italic note at the top.  The best part of this page however was the snippet at the very bottom which shows you how to load up a module very minimally.  All I had to do was switch out the relevant parts and try it out.</p><pre><code>fetch(&quot;my-math-module.wasm&quot;)    .then(function(response) {        return response.arrayBuffer();    })    .then(function(buffer) {        var dependencies = {            &quot;global&quot;: {},            &quot;env&quot;: {}        };        dependencies[&quot;global.Math&quot;] = window.Math;        var moduleBufferView = new Uint8Array(buffer);        var myMathModule = Wasm.instantiateModule(moduleBufferView, dependencies);        console.log(myMathModule.exports.doubleExp);        for(var i = 0; i &lt; 5; i++) {            console.log(myMathModule.exports.doubleExp(i));        }    });</code></pre><p>Toss that in an html file, <a href="https://www.npmjs.com/package/local-web-server" target="_blank" rel="noopener">fire up a server in your local folder</a> and load it up.  Here's what it looks like in both browsers:</p><p><img src="/img/wasm-in-browser.png" alt="wasm in a browser"><em>wasm running in a browser (or trying to at least)</em></p><p>Time to go file a bug report I guess.  Remember, it's all experimental technology and very unstable, so try not to get overly frustrated when things like this happen.</p><p><img src="/img/keep-calm-and-file-bug-reports.png" alt="keep calm and file bug reports"></p><h3>Congratulations!</h3><p>You've created your first WebAssembly component.  What's next?  We're really just cracking the surface here.  Writing asm.js by hand was pretty cruical to this example, but doing anything non trivial in it takes a long time and lot of patience.  Using emscripten to compile non trivial apps to asm.js is much easier.  On that note, I highly suggest reading up on the asm.js specification, especially the memory model, because a lot of the concepts from there carry over to WebAssembly.  Another quirk is that right now you cannot directly pass arrays as function arguments.  There is some agreement that that should change, but nothing has made it in the spec yet.  Go brush up on your pointer logic.</p><p>Another note, when you start doing non trivial things in wasm, you might find that it actually performs slower in WebAssembly than plain old javascript.  Just remember that modern javascript engines are highly optimized for compiling javascript and it will take time for wasm compilation to catch up.  WebAssembly is not ready for production usage.</p><p>If you have any questions regarding wasm or the tooling described here, please ask on <a href="http://stackoverflow.com" target="_blank" rel="noopener">Stack Overflow</a> and tag appropriately.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I first heard of &lt;a href=&quot;https://webassembly.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebAssembly&lt;/a&gt; it sure sounded cool and I 
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Getting past the resume screen</title>
    <link href="http://culture-of-development.com/blog/getting-past-the-resume-screen/"/>
    <id>http://culture-of-development.com/blog/getting-past-the-resume-screen/</id>
    <published>2015-05-27T01:58:00.000Z</published>
    <updated>2016-06-15T14:00:21.940Z</updated>
    
    <content type="html"><![CDATA[<p>One of the hardest parts of finding a job is actually applying to it.  It takes quite a bit of work to prepare a resume and the last thing you want is for all that hard work to be immediately thrown in the trash upon arrival.</p><p><strong>The perception</strong>:At first you might just think &quot;I'm bad at taking tests&quot; or &quot;I didn't really want to do that job anyway&quot;.  After waiting for responses from a few more companies that are not going to respond it seems like no one wants you.  Then someone calls back, and wants to talk about your resume.  For a minute you feel great, and they can hear the pep in your voice, but they never ask you to interview and it starts to feel like you're not good enough.  Eventually you end up thinking you'll take anything, and after a little while longer you just become a <a href="http://en.wikipedia.org/wiki/Discouraged_worker" target="_blank" rel="noopener">discouraged worker</a>.</p><p><strong>The reality</strong>:There's good news though!  You're probably just making simple mistakes in the way you present yourself and your accomplishments, and you can learn how to correct those mistakes.  This series of blog posts is a crash course in getting past the resume screen for most programming jobs.</p><h2>Understanding the employer perspective</h2><p>Most companies have a simple set of requirements.  The list is not always exactly the same, and unfortunately the way they go about hiring for these attributes is not consistent, but we will deal with that later.  These attributes are the most globally important to any company who is looking to hire for a full time position.</p><h4>Someone who can do the job.</h4><p><strong>The perception</strong>:This is often comes across poorly in job listings as long lists of alphabet soup, often accompanied by many years of experience in those technologies.  You think the company is stupid for requiring 10 years of experience in a technology that's only been in existence for 7 years.  Or worse, you think &quot;shucks, this job would be awesome if I had 3 years of cold fusion experience&quot;.</p><p><strong>The reality</strong>:Job listings are often not written by people who have much of a clue of what the programming terminology they are using.  The HR person will either wing it from their experience or they will ask someone in the dev management chain for a brief job listing with requirements.  The dev manager (for lack of a better term, HR people tend to be quite intelligent) tries to dumb down the requirements to something the HR person can verify before passing a resume along.</p><p>In truth, you should only worry about these lists of requirements for jobs that need to be completed tomorrow.  Just about everyone else is willing to train you on the job as long as you show promise and the ability to learn quickly.</p><h4>Someone who cares about the work this company is doing</h4><p><strong>The perception</strong>:They want power users to work on their product, or industry experts who are pushing the bleeding edge forward with their every commit.</p><p><strong>The reality</strong>:Well actually that sounds awesome, and they do want those people.  Unfortunately there just aren't a lot of those people, they tend to have great jobs they are way happy with already and the company has actually taken those people out to multiple lobster dinners to try to woo them already.</p><p>For everyone else who can do the job, it's important that they <em>stick around for a while</em>.  It costs a lot of effort and money to get someone up to speed on a codebase.  Having someone on board who already understands the thing they are doing makes it a whole lot easier to ramp them up, productivity comes a lot faster and they are less likely to jump ship when the problems get harder.</p><h4>Someone who can make the team better</h4><p><strong>The perception</strong>:They want people who can come in and solve these problems that they are working on because they already know how to solve them.</p><p><strong>The reality</strong>:Most companies have lots of things they want to do, but limited resources (man hours) in which to utilize.  Hiring more developers increases that pool of resources.  With some luck, as the new devs gets ramped up, they will also have some other good ideas for the tools they work on.</p><p>For most people, being the smartest person in the room gets old pretty quickly because you no longer feel challenged and you feel like too many of your personal resources are being used helping other people accomplish their tasks without getting the same help in return.  Often the catalyst for changing jobs is exactly this and you need to find a new job with smarter people who you can learn from again.</p><p>At some point in your developer career, you'll find someone who knows one technology or paradigm far better than you could hope to learn in a good amount of time (say 6 months or a year).  This is when humility starts to set in and it's a wonderful thing.  It's especially wonderful when that same person comes to you for help on a topic you are much more familiar with.  This is a very fruitful kind of relationship and good companies try their hardest to foster this kind of diversity on their teams.</p><h2>What's next?</h2><p>That's pretty much the gist of what most companies are actually looking for.  In the next episode we're going to take a look at your resume from an employers perspective to make it clear where the problems are.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of the hardest parts of finding a job is actually applying to it.  It takes quite a bit of work to prepare a resume and the last thin
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Always Get/Give Interview Feedback, It Matters</title>
    <link href="http://culture-of-development.com/blog/always-give-interview-feedback/"/>
    <id>http://culture-of-development.com/blog/always-give-interview-feedback/</id>
    <published>2015-03-08T18:49:00.000Z</published>
    <updated>2016-06-15T14:00:32.052Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I received the best email of my life.  It was from someone I interviewed just after I moved back to Atlanta who unfortunately did not get the job.  I think it speaks for itself.</p><p><img src="/img/feedback-is-important.png" alt="The most amazing email I have ever received."></p><p>One line kind of stood out to me, <code>and that you gave me feedback when most companies absolutely don't (i really don't know why)</code>.  This got me thinking, and all that kept reiterating in my head was, &quot;really?!&quot;.  What follows is why, why companies shouldn't fuck up this part of the interview and some general advice for candidates who find themselves in the (possibly) unfortunate situation of receiving a rejection letter.</p><h2>The no-hire</h2><p>When you interview people, <a href="http://cultureofdevelopment.com/blog/2013/03/24/interviews-what-im-thinking-while-im-interviewing-you/" target="_blank" rel="noopener">you're both hoping the interview ends in a hire</a>.  Unfortunately, that's not always how things turn out; for one reason or another this interview went downhill and the process is going to end for this candidate.</p><p>If you as the employer decided the process is over, it's easy to think about the bad, which is that we're not hiring this person.  Whatever that reason may be, it's probably stuck on your brain right now and you start to dread the possibility that the person comes back asking what they did wrong.  You're sure it's going to be awkward and they are probably going make a case for a do-over and you really don't want to deal with that.</p><h2>The choice is yours</h2><p>As you suspected, the person was not expecting the process to be over, and they do ask for feedback.  This is your opportunity to really cock things up for your company, or reinforce how amazing it would be to work with you.  And those are the only two options.</p><h3>Be a shit shack</h3><p>If you either ignore the feedback request, or send that old &quot;there were a lot of qualified candidates and we had to make tough choices&quot;, you make your company look like the kind of place that thinks they are too good people who don't work there.  That's not really the kind of place you most people are comfortable working and it looks terrible.  It's also pretty disrespectful as we'll see in a minute.</p><h3>Be a Palace of Awesomeness</h3><p>Your other option is to give them the honest, direct and specific feedback they requested.  Having been in this situation more than a few times, I understand how difficult it can be to do that.  The problem is, if you don't do that, you make the candidate feel like you lied to them.  Because you did lie to them.  It often feels like providing this kind of direct feedback to people is going to be hard to swallow on the candidate's end and pretty much everyone (especially developers) hate being the bearer of this kind of bad news.  That's why it's nice having that HR contact buffer so you don't have to be responsible to sending the rejection letter in the first place.</p><p>But think about it for a minute...</p><ul><li>They made it through your company's resume review</li><li>They made it through your company's phone screen</li><li>They probably solved your easy questions no problem</li><li>Possibly they made it through other interviews before they even got to a round with you</li></ul><p>That's <em>a lot</em> of success.  They were probably not expecting the interview to end when it did and it's totally reasonable for them to ask what it was that made you make the decision to terminate the application.  <strong>They deserve the feedback they have requested.</strong>  As reference, here is the feedback I gave Stan when he asked for it.</p><p><img src="/img/feedback-given.png" alt="Feedback as requested."></p><p>Since they made it through all the way through this far once... they should be able to make it through at least as much if they were to apply again, and that's probably further than 90% of people who apply for your job.  Because of this, I have started to encourage everyone I no hire to reapply again in 6 months and tell them exactly how much they have already accomplished.  Basically I want them to think about Stack Exchange like a <a href="https://www.youtube.com/watch?v=Wno4o1SvI7Q" target="_blank" rel="noopener">Palace of Awesomeness, music and all</a> and that this isn't the end of the road, it's just a bump.</p><h2>If you are on the receiving end of the rejection letter</h2><p>It's heartbreaking to find out the process is over when you really want a job.  It is soul crushing to think the game is over.  First realize that if it the game actually is over, it's probably a shitty place to work anyway.  I know I wouldn't want to work somewhere that wasn't willing to reconsider me after I spend some time developing the skills I need to succeed at their shop.  So if that's the case, fuck em.  So you can typically assume that's not the case.</p><p><strong>Always ask for feedback from the person who rejected you, even if you think you already know why they rejected you.</strong>  It is often the case that one thing sticks out in your head as the sole reason why you were turned down, and it's easy to focus on that one reason alone.  Then you get another interview and think you've kicked this one issue you had, and you are completely blindsided by the next rejection.  The mistake you made was assuming you know what was going through the last interviewer's head.  The only person who knows that, is that person and the only way you're going to find out what they were thinking is to ask for a brain dump <em>from the person who rejected you</em>.  Make sure you ask them to point our specific things you said or did which affected their impression of you.</p><p>Once you have received the feedback, evaluate whether you would ever want to apply there again and if so, be sure to ask your HR contact when the timer runs out for applying again.  Then mark that date on your calendar.  When that time comes, guess what, you already have some contacts inside the company to fast forward your application to.</p><h3>Should you reapply?</h3><p>This comes down to why you applied in the first place.  If you just needed a job, you probably found another one already.  If you applied to this job because you are passionate about the problems they solve or you want to work with smart people, then you might have a reason to reapply.</p><p>It can be exceptionally intimidating to reapply to the same job you were already turned down for.  It's a natural to avoid the same pain twice, but if you still want to work the people at the company or you're still passionate about the work you would do there, you pretty much have to apply again when the timer runs out.  Make sure you spend the time in between working out the issues you received in the feedback you were provided.</p><p>If you do get accepted into the interview process again, request to be interviewed by people who did not interview you the first time if possible.  This is a means of eliminating as much bias as possible and it's generally easier to sit in front of someone who did not reject you previously.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday I received the best email of my life.  It was from someone I interviewed just after I moved back to Atlanta who unfortunately d
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Your Developer Toolbox</title>
    <link href="http://culture-of-development.com/blog/your-developer-toolbox/"/>
    <id>http://culture-of-development.com/blog/your-developer-toolbox/</id>
    <published>2013-12-27T15:33:00.000Z</published>
    <updated>2016-06-15T14:00:06.620Z</updated>
    
    <content type="html"><![CDATA[<p>As you probably know, when we're interviewing someone, we're looking for people who are <a href="http://www.joelonsoftware.com/articles/fog0000000073.html" target="_blank" rel="noopener">smart and gets things done</a>.  Most interviews that end with a &quot;no hire&quot; fail both of those checks.  Don't despair however, it's not that they are bad developers, they just need more time to fill up their developer toolbox.  Having a well stocked developer toolbox typically solves both of these problems.</p><p>So what's this developer toolbox you ask?  Your developer toolbox is the set of tools you can reach for when solving a problem.  The languages you know, the algorithms you can readily implement, the frameworks you are familiar with, the paradigms you can map problems to, how you look for solutions to the problems you face and even the people you talk shop with.</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/20060513_toolbox.jpg/640px-20060513_toolbox.jpg" alt="Toolbox, not quite the same, but you get it, right?"></p><p>The image above was lifted from <a href="http://commons.wikimedia.org/wiki/File:20060513_toolbox.jpg" target="_blank" rel="noopener">wikipedia</a> and it's probably the only image of a non red toolbox on the internet.</p><h3>Not too much, not too little, but just right</h3><p>Interviews tend to spiral downward when someone has either an underdeveloped or overdeveloped toolbox to pull from.  In both cases, gets things done tends to be an issue.</p><p>Underdeveloped toolboxes lack clear evidence of the smart part.  Underdeveloped toolboxes are easy to call out because the interviewee simply doesn't know enough about a technology or pattern to make the decision to use it or not as a means for solving the problem.  They skip using a tool they know of because they aren't sure if it will make the solution easier, or they skip using the tool because they don't know if it will improve performance.  And obviously everyone skips using the tools they don't know about.</p><p>Overdeveloped toolboxes are when a person knows a small set of tools really well.  Like... really, really well.  Need to tell if a block of text contains an email address?  They know this regex off the top of their head.  Need to tell if a number is divisible by 3?  Convert number to string to and match against this regex [be damned that you could just actually divide by 3! this regex is much more interesting!].  Need to parse html?  There's a regex for your case.  Seriously.  And they are right, their solution will work for whatever problem you throw at them.  Unfortunately, these people tend not to stray to find better tools for the job and are generally only interested in  being the guy who has to maintain the code these people wrote is excruciating and demotivating work.</p><p>So how do you get it just right?  Simple, learn what the tools are intended to be used for, and stick to using them for those things.  You really only stray from that dogma when you can't find something that fits your situation exactly, and you choose the best thing you can find.</p><h3>Filling up your developer toolbox</h3><p>A well stocked developer toolbox goes a long way to at least making you come off as someone who is smart and gets things done.  Although your toolbox includes sites like <a href="http://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> and all the documentation on the internet, the things you know without having to look them up are what make you fast.</p><p>What you fill your developer toolbox up with is up to you, but you should base it on your interests.  If you love being a web developer, you'll find a lot of technologies mandatory which a game developer will not.  There are, however, some basics which are (almost entirely) cross cutting and you should know them thoroughly.</p><ol><li>Analysis of algorithms: looking at a piece of code, estimate it's run time and memory needs compared to other algorithms for a given input size</li><li>Sorting: the various sorting methods and in particular their run time for different input sizes</li><li>Searching: a handful of various binary search trees, hash structures and string processing... and in particular their run time for different input sizes</li></ol><p>As you can see, analysis of algorithms is pretty important.  <strong>A well developed ability to estimate the run time of an algorithm is one of the primary tools for making smart decisions.</strong>  Understanding the run time at various input sizes gives you the ability to make better choices for algorithm performance up front when thinking about your solution rather than just implementing the most naive possible solution.  This saves you time, particularly in projects when relying on the built in tools no longer get the job done (e.g. queue implementations tend to optimize for either push or pop, and practically no languages include good implementations of both).</p><p>Searching and sorting are simply fundamental.  Many practical problems decompose to being exactly a searching problem, a sorting problem or some combination of the two.  For many of these solutions, the computational time spent doing these tasks can easily overwhelm everything else.  Despite often being a single line in your pseudocode, your implementation choice can often make a world of difference in the quality and performance of your solution.  On multiple occasions, two interviewees have come up with the same solution pseudocode, but after implementing it, only one person moves on.</p><p>Beyond this you want a wide breadth of tools from many different topics and a strong concentration in one area, preferably the area you are most interested in.  It's impossible to overstate the important of having a wide breadth of tools.  The breadth of your toolbox helps you come up with creative solutions to problems and can often help you find places to look for solutions you wouldn't have otherwise known of.</p><h3>Learn the important parts</h3><p>When you are studying these algorithms and data structures, there are 2 things you need to make sure you commit to memory.  First, you need to understand the various run times for average case and worst case for <em>each operation</em> in the data structure, and second, you need to actually be able to explain how an implementation would work in order to achieve that run time for each operation.  Thinking a faster solution exists isn't particularly useful if you cannot implement it.  Often times there are multiple ways to implement a data structure so that it has the exact same run time for each operation but the solutions have different memory requirements and readability concerns.  Knowing more than one implementation can often make your code even faster to implement (or more readable) as long as you know the typical input size up front.</p><p>Knowing the run times should be enough to make you understand what the data structure or algorithm are useful for, but it still helps to explicitly come up with uses when you are studying.  For any problem, you need to be able to say why you chose the algorithm and why you chose the particular implementation.</p><h3>This all seems pretty academic</h3><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Academic_Quadrangle.jpg/640px-Academic_Quadrangle.jpg" alt="learning, and shit"></p><p>The above image was lifted from <a href="http://commons.wikimedia.org/wiki/File:Academic_Quadrangle.jpg" target="_blank" rel="noopener">wikipedia</a>.</p><p>I know; practicing programming by studying and not just implementing whatever ideas come to mind?  How blasphemous!  Remember, the goal here is to make you not just faster (gets things done), but also to make you smarter.</p><p>Having an idea of what smarter means and simple steps for how to achieve it will hopefully give you a place to start thinking about how to improve yourself.</p><p>You save time two ways.  Practicing implementations for and with various tools helps you get better at using them by learning their APIs and giving you experience to reflect on when coming up with new solutions.  You are almost certainly doing this already however.  You also save time by virtue of being smarter.  Since you have a wide range of tools to pull from, you can find something that just right for this problem much faster and you can often skip naive solutions which makes your solution sufficient for much larger input or load as the problem scales.</p><p>Discussion on <a href="https://news.ycombinator.com/item?id=6984951" target="_blank" rel="noopener">Hacker News</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As you probably know, when we&#39;re interviewing someone, we&#39;re looking for people who are &lt;a href=&quot;http://www.joelonsoftware.com/articles/f
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>The correct response to shitty technical arguments</title>
    <link href="http://culture-of-development.com/blog/the-correct-response-to-shitty-technical-arguments/"/>
    <id>http://culture-of-development.com/blog/the-correct-response-to-shitty-technical-arguments/</id>
    <published>2013-08-13T02:13:00.000Z</published>
    <updated>2016-06-15T14:00:11.003Z</updated>
    
    <content type="html"><![CDATA[<p>Ohh, why should we do it that way?</p><p>You know what, our project <em>isn't</em> written in node.  I don't give a shit <em>how</em> they do in rails.  It's <em>wonderful</em> that github and twitter do it like that.  Please explain to me how dhh has <em>anything</em> to do with this situation.  And sometimes Joel <em>is</em> wrong.  What Scott Hanselman says is great but he was solving a <strong>totally different problem</strong>.  So you'd do this serially if this were javascript huh?  <em>Awesome</em>.  Microsoft best practice?  <em>Hysterical laughter</em>.</p><p>The next time you are about to argue what some authority would do, make the case the authority would make by arguing their points instead of their name.  You'll save everyone a lot of time, it might show that you know when and why it should be done that way and you might just sound like you can think for yourself.</p><p>I'd love to hear your best responses to these shitty arguments.  Tweet them with the hash tag #ShittyArgument.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ohh, why should we do it that way?&lt;/p&gt;
&lt;p&gt;You know what, our project &lt;em&gt;isn&#39;t&lt;/em&gt; written in node.  I don&#39;t give a shit &lt;em&gt;how&lt;/em&gt; th
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Draft your code</title>
    <link href="http://culture-of-development.com/blog/draft-your-code/"/>
    <id>http://culture-of-development.com/blog/draft-your-code/</id>
    <published>2013-06-19T19:42:00.000Z</published>
    <updated>2016-06-15T14:00:26.932Z</updated>
    
    <content type="html"><![CDATA[<p>The essence of craftsmanship is skill.  Skill is developed by practicing a task until it is understood as completely as possible.  Ergo, practice your craft.  The act of practicing a task can often be done in many ways, and the methods are comparable by how quickly they improve your understanding of the task.  A craftsman opts to practice in the way that most improves their understanding of the their task.  If you are a software craftsman, <em>draft your code</em>.</p><h2>The departure of craftsmanship.</h2><p>Around the time I entered middle school, computers had gotten into just about every class room and many people had one at home.  We no longer wrote our book reports and three point essays by hand, we typed them up on the computer and printed them out before we turned them in.  I remember prior to this repeatedly being told that we should write rough drafts and then refine them.  In fact, I remember some of my earlier assignments even required me to turn in those rough drafts along side the final paper.  Somewhere in the first few years of writing papers on the computer, that requirement went out the window.  Sure you can just highlight and delete the parts you want to edit out or just add a few modifiers by moving the cursor to the appropriate position to edit it on the fly, but somewhere in there the concept of drafting your thoughts was lost.</p><p>Back in those days, I was one of the proprietors of this new way of thinking.  I would write the paper all the way through to the end, hand in the rough draft, then my final paper was just copying and pasting sentences in a different order.  I was simply changing it because I was told to, not because I thought it was better how I changed it; I wasn't even thinking about that.  In the end it turns out I am not a craftsman of the written word.  I leave this post as evidence.</p><h2>&quot;The best code in the word is meaningless if nobody knows about your product.&quot;</h2><p>Back in those days, I had already started my career as a hacker.  Unfortunately for me, and the first few people I ever shared my code with, I applied my lack of craftsmanship in writing book reports to my hobby of writing code, and I basically refused to change it once it worked.  I also remember reading every available article on game development and repeatedly seeing the mantra <em>once it works, the code is right</em>.  No one expects your code to look good when you're 11 and just learning to program, but it's a fact that you apply lessons from domains you are more familiar with to new domains as you encounter them.  This is why you say &quot;hello&quot; when introduced to new people instead of punching them in the gut.  Perhaps it's no coincidence that hello world is such a popular program to implement when learning new languages.</p><p>The quote in the title of this section is from <a href="http://www.ianlandsman.com/2006/10/06/10-tips-for-moving-from-programmer-to-entrepreneur" target="_blank" rel="noopener">Ian Landsman</a> back in 2006 and in context of entrepreneurship it is a great quote.  However, a context shift has occurred through the repeater of the internet and shortening via Twitter over the years reducing this to the more common expression &quot;the code doesn't matter as much as the product&quot;.  This adjusted and context-less phrase is often used as a defense for neglecting code craftsmanship in favor of product thought.  This is completely analogous to my youthful defense for not writing drafts of my book reports because I could just edit it on the screen.  In both cases, it's craftsmanship that's left behind.</p><h2>There are many so many resources out there.</h2><p>There are many more software developers out there today then there were when I started programming 20 years ago.  Many of them are entering the field at a later age and are writing code as a bad as I was back then.  Much like I read everything I could on game development back then, people are trying to to connect to more skilled developers through twitter, following blogs and picking up books.  It's great that all this stuff is available today, I only imagine where I would be today if I had picked up better habits earlier on.  But it occurred to me recently that people naturally trust the ideas of other people they feel are more skilled than them, almost blindly.  I did it back then, and I hear it in much louder voices today.  When an older developer takes a quote out of context to discourage the importance of craftsmanship, it makes me want to punch them in the gut.  When a newer developer uses the same quote to deny the importance of craftsmanship, it makes me want to cry.</p><p>Luckily today there is a whole library of books, blog posts, youtube videos, presentation slides and other stuff on code craftsmanship, so it's much easier to right the misunderstanding in the flexible ideas in newer developers minds.  Occasionally this wealth of knowledge gets the best of people, overwhelming them with too many concepts which they do not completely understand.  Most often you can tell when someone is overwhelmed because they will almost tell you outright that they have formed this idea of perfect code in their head and as a result.  The result of this is usually writers block, because they want to write this perfect code, but they don't understand the concepts enough to know if they are even writing good code when in fact all they really need to be writing is working that meets spec&lt;sup&gt;1&lt;/sup&gt;.</p><h2>What about refactoring?</h2><p>Refactoring is one form of code drafting.  Refactoring normally means, we know there is some kind of problem with how the code is now and how we need to the code needs to interact with something else, so let's adjust it to meet those requirements as well.  When I say <em>draft your code</em>, I mean write that shit 5 more times immediately after you implement it for the first time.  5 is an arbitrary number; what I really mean is write it enough times to understand it thoroughly.  Verify that it works after each implementation.  Typically I limit the scope of this advice to algorithm and pattern implementation, no higher.  Each time try using different abstractions, write down the memory usage, runtime expectation, then consider the integration points for the rest of your system and the overall readability.</p><p>I also encourage you to scratch rewrite the code at least once.  It's easy to fall into the trap of thinking you can just move things around and change the name of your functions to something more readable, but you're likely to gain a false sense of confidence with this new algorithm or abstraction simply because you were able to make it work in this one system this one time.  For any sufficiently complex algorithm or pattern, you'll often find the one way it worked in that one system really <em>was</em> only good for that one system.  When learning new concepts, the craftsman strives for something better; they strive to identify and abstract the core components.</p><h2>An example.</h2><p>Recently I started watching the videos for the <a href="https://class.coursera.org/nlangp-001/class/index" target="_blank" rel="noopener">Natural Language Processing</a> course on Coursera.  In the first homework you build a language model to identify gene names in a blob of text.  As per normal, the first time I implement a new algorithm, I create a new project in my dev environment and give it a shot.  The first part of the homework was to calculate emission probabilities for a hidden markov model (HMM).  After a couple of hours, I had something that was able to generate the correct solutions so I moved on to part two which was to select word tags trigram probabilities from the same HMM using the Viterbi algorithm.  I hacked this together and then modified it once more for the last part of the homework which was to support different classes of rare words.  All in all this homework took me about 5 hours to get through.</p><p>Hopefully you're like me and you're at most vaguely familiar with the concepts I just listed.  I was able to solve the problem and I was pretty pumped to see the results match the test data.  In the past I would have turned it in and gone to bed.  Instead, I immediately deleted the project I was working in and started a new one.  Then I did the homework a second time.  The first time through, the whole thing was implemented as a small set of functions consisting of about 150-200 lines.  I was doing this in an object oriented language and I didn't create a single class.  This is pretty typical of a first implementation.  I understood the mathematical concepts of the models before hand, but having never <em>implemented</em> them, I had no idea what the best abstractions were.  Now I had a better idea, so it was time to find a better way to write it.</p><p>For the next implementation, I considered how this might be used in an actual application.  Essentially my application would have sentences broken down into word collections and I would want to pass each word collection to a function that returns a collection of equal length with the tags assigned to each word.  The core logic was only to do the tagging, so I created an interface with a single function to do the tagging:</p><pre><code>interface ITagger{    string[] GetSentenceTags(string[] sentence);}</code></pre><p>I wrote all of the input parsing logic in my new project, wrote all the functions that use this interface and made sure it compiled.  Now it was time to implement this function.  I remembered implementing the <code>ArgMax</code> function repeatedly, so the first time I ran into it, I knew to pull it out into a function.  I also remembered the whole structure for holding the word counts was deeply nested generics, so I decided extract a <code>WordInfo</code> class that also cleaned up the word counting and tag checking code from the first implementation.  I also used a completely new mechanism for storing the back pointers in the Viterbi implementation.  Now this thing was looking a lot better and I had developed some very useful helper classes.  There was a lot more code in this version, but it was much easier to understand and in general I felt like I had identified a couple of useful helper classes.  Additionally, I was able to debug the Viterbi algorithm much easier because I understood what it was doing.</p><p>Then I deleted my implementation again.  I left all of the junk code for loading up the input data because it wasn't the core logic I was trying to learn.  This time through I decided to implement the model as it's own concept.  The idea was to make the literature (i.e. the lecture notes) translate as directly as possible to the concepts implemented in the code so that if you needed to understand what was going on, you'd just have to read the lecture notes and names of ideas there would be the names of classes or functions in code.  This turned out to be a great idea because it left only the Viterbi algorithm implemented in the <code>ITagger</code> implementation and moved all of the data functions to a separate class.  This really cleaned up the responsibilities in the code as well.  Again I decided to use yet another storage mechanism for the recursive values in the Viterbi algorithm and as a bonus, I only had one off by one bug in the implementation this time despite the changes; it was clear I was really starting to understand it.</p><p>Now I was happy with the abstractions and comfortable with implementing the hard parts.  At this point I moved into refactoring mode.  In the first pass I broke apart the remaining multipurpose functions.  In the second pass I renamed everything to be specific as necessary and more closely match the names used in the lecture notes.  At the end I DRYed up some obvious duplication.</p><h2>Conclusion.</h2><p>In the end I spent a full day doing something I could have finished in 5 hours.  Instead of just getting the homework finished, I now have experience writing the actual code to implement this in a real system, implemented the solution in 3 distinct ways and have a clear idea of how the important parts work together because I've stepped through the code debugging them multiple times.  The resulting code is more readable, more testable and DRYer than the original implementation.  I stress however, this code is not perfect.  I'm not even sure what the perfect code would be, but I'm certain the result meets the spec and would be much easier for someone else to understand (or me to understand months from now when it breaks).</p><p>You might argue that all of what I have done could also have been achieved through refactoring.  I firmly believe you can be influenced by the existence of a working solution to only make trivial changes, particularly if you are a newer developer with a smaller toolbox.  As soon as you envision a change, use that as your starting point for the next clean slate implementation.  This can be just the inspiration you need to come up with a better ideas for other parts of the solution.  Restated simply again, <em>draft your code</em>.</p><h3>Make it a life goal</h3><p>I didn't realize it until it was pointed out recently, but the idea of drafting has been ironed into my day everyday thinking for some time.  Not just in regards to writing code or writing book reports, but <strong>my entire life and everything I do</strong>.  For my first wedding anniversary, my wife made us picture formed from the words of our wedding vows.  It's a picture of a rocket flying to the moon because I have a huge hobby of making high power rockets and my life goal is to go to the moon.  In the image, the words of my vows make up the rocket and my wife's vows make up the moon.  The background is made up of the words to the song we danced to for our first dance.</p><p><img src="/img/vows.jpg" alt="rocket vows"></p><p>If you zoom in on the part surrounded by the red box, the words in my vows read:</p><blockquote><p>When I realized I had fallen in love with you, I wanted so much for everything to be perfect for you from that day forward for the rest of your life.  I have since learned that perfection is built; it is not something that exists in the beginning when we barely know each other only to be foiled in a single moment, never again to be obtained.</p></blockquote><hr><p>&lt;sup&gt;1&lt;/sup&gt;: Thank you to this <a href="http://stackoverflow.com/questions/16735588/applying-clean-code-and-solid-principle-take-me-so-much-time-normal/16736954" target="_blank" rel="noopener">Stack Overflow question</a> for providing the motivation for this blog post.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The essence of craftsmanship is skill.  Skill is developed by practicing a task until it is understood as completely as possible.  Ergo, 
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Interviews: what I&#39;m thinking while I&#39;m interviewing you</title>
    <link href="http://culture-of-development.com/blog/interviews-what-im-thinking-while-im-interviewing-you/"/>
    <id>http://culture-of-development.com/blog/interviews-what-im-thinking-while-im-interviewing-you/</id>
    <published>2013-03-24T20:01:00.000Z</published>
    <updated>2016-06-15T14:00:17.827Z</updated>
    
    <content type="html"><![CDATA[<p>As an interviewee, I always wished I could know what the interviewer was looking for in the interview.  I wish I could see in their mind at exactly what they are looking for and tailor my responses directly to them.  Are they looking for me to write comments?  Do they want me to start with tests?  Are they just looking for a description of the solution?  I've come to realize that's only part of it, but knowing and applying that extra information still sets you noticeably apart from the competition.</p><p>Today I'm mostly on the side of interviewing people.  When I started interviewing people, I did my research; I asked people in my company what the key components to look for were, I read a few books and I looked around the internet.  Most importantly I studied the question I was going to ask until I thought I knew the most likely ways to solve it, every detail of production quality code for each of those solutions and every mistake the interviewee would likely make.  Truth be told I had been in exactly 2 technical interviews in my life, one from my previous company and one from my current company.  Going into the first interview as the interviewer, I was at least as nervous as the person I was interviewing.</p><p>About 5 minutes into the interview that nervousness all went away.  It was about that time I realized <strong>we both want this interview to end with a hire</strong>.  Knowing that, I didn't care about any mistakes I might make because one of three things would happen:</p><ol><li>the interviewee thinks I'm stupid and doesn't correct my mistakes, thinking he doesn't want to work with people like me</li><li>the interviewee corrects my mistake, or his perceived mistake and we have a conversation to come up with a solution</li><li>the interviewee does not correct me and just rolls with it (either thinking I was right or just being too timid to correct me)</li></ol><p>I make unintentional mistakes all. the. time.  In case 1, well... I don't really want to work with someone who just lets me be stupid all the time either, and this will probably end up in a no hire because they would decline an offer anyway.  In case 3, well... I really don't want to work with someone who rolls with mistakes as facts or is too timid to correct them either. I can't trust that person to give me critical feedback and that's almost certainly enough for me to say no hire.  But in case 2, we end up having a conversation about a misunderstanding.  This grants me an opportunity to explore this person's ability to quickly examine and unravel a misunderstanding.  That is a truly valuable skill.</p><p>Because of this, I intentionally made false claims to interviewees a few times.  I haven't done that since those first few interviews however because I'm not a great actor and it came off as obviously scripted in the cases when the person did correct me.  Also, I never ended up having that amazing conversation when I did this, but it almost always happens when the mistake is unintentional.  There is also a much better way to make mistakes, just ask new questions almost all the time.  I'm still going to study my question before asking it and know a few ways to solve it, but I don't want to be so familiar with the question I'm asking that I know everything about it and me asking you to explain your answer is just a formality.  I want your explanation to be more of a discussion than me making sure you dotted all the T's and crossed all the I's.</p><h2>What I'm looking for in an interview</h2><ul><li>requirements and clarification</li><li>thought process</li></ul><p>I state explicitly at the beginning of every technical question, &quot;you can make any assumptions you'd like and ask me for clarification about anything you don't understand&quot;.  What I'm really saying is &quot;for every ambiguity, state an assumption or ask for clarification from me&quot;.  Notice that both of those involve telling me what you are thinking.  This is wildly important because I cannot read your mind and more importantly <em>I cannot clarify your solution</em>!</p><p>A lot of times interviewees start by writing down the few requirements I give them and they think about it for a little bit, then start writing on some paper (which I cannot see remotely), and then they write some lines of code which are often difficult for me to understand if they make any sense at all.  At the end they try to explain their solution and almost undoubtedly I find an issue within the first 2 sentences by stating a requirement contrary to an assumption they chose but didn't state or clarify.  They probably made the correct assumption in the first place, but since that requirement wasn't set in stone earlier by stating an assumption or clarifying a decision point with me, I'm going to take this opportunity to switch things up and then I'm going to be more critical that they state their assumptions early for the remainder of the interview.</p><p>Assumptions need to be clear, and clarification needs to happen early.  It has actually been the case on a big project I worked on for Careers where we made assumptions when we should have clarified requirements, then spent a couple months building out this huge new feature only to find out that some of those early assumptions were incorrect.  This wastes a lot of very valuable time.  In an interview if you state an assumption, I will generally let you roll with it as fact unless I know for certain it will lead you down a long path to eventual failure.  In that case I'll stop you right there and talk about it in hopes of swaying you to an alternative solution.  As long as you state it out loud or write it down, I have the opportunity to clarify my understanding of your solution along the way.  If you don't, that turns out to be a costly problem in an interview and on the actual job.</p><p>You might think it's stupid not to give a rigidly defined question in an interview because it's only about an hour and you don't want to waste time determining unmentioned requirements.  I do this because on our team this is closely mimics the actual work you will be doing.  You're going to get projects as ideas, and then you're going to have to make all the assumptions and clarify requirements with the team.  It would be extra special if you come up with multiple solutions in your head, determine why each might be better, ask me questions about how this going to be used and then make your implementation decision from my answers.</p><p>I might ask questions differently if the team dynamics were different, but as an interviewee, it's a good assumption that the manner in which you answer technical questions <em>will</em> be closely related to how you will actually be working on their team.  This is very important to recognize when making your decision to continue the hiring process or accept any possible offer.</p><ul><li>speed</li><li>quality</li></ul><p>We're going to spend roughly half the time in the interview talking about things that have nothing to do with technical questions.  At least I hope that's how it will work out.  You probably know we hire people who are smart and get things done.  Quite frankly, <strong>it's better to have something that can be improved upon than trying to get the &quot;best&quot; answer on the first try</strong>.  Get something we can talk about rather than getting upset staring at a blank page while trying to think of the &quot;best&quot; answer.  Honestly, I don't know what the best answer is to most questions I ask, so I won't even be able to help you get there.  I'm looking for a sufficient answer, fast enough.  In most cases the 90% solution is good enough, and if you want the other 90% of the credit, you have to really blow me away with something completely elegant.  Even still, that's only one part of the whole package of the interview, not a guaranteed hire.</p><p>The speed at which I expect each question to be answered is different and generally pretty fuzzy, but it's important to understand that dead air, the time where you are thinking and not talking out loud or time when you are doing something I cannot see needs to be kept to a minimum.  I try to give people ample time to work things out in their head, but by the time you start writing a solution, you should have at least given me a brief overview of the approach you are about to take.</p><p>When it comes to quality, I am looking for the candidate to answer 2 questions: 1) does it do everything it's supposed to do for all possible input? and 2) is there a more algorithmically efficient way to solve the problem?  In general you'll solve a question faster if you just solve the happy path first, and then look for edge cases.  If you try to think of edge cases up front, you'll likely get bogged down trying to come up with a solution for everything all at once.  Get an answer down, then search for edge cases on your own, make appropriate changes and when you're done I'll give you some hints for any you might have missed.  Why will I give you hints?  Because that's how our team works.  I'll run things by you all the time to help me identify edge cases I might have missed, and I'll expect you to do the same to me if you're hired.</p><p>For most of the day to day quality concerns, clean code, style, etc, I am extremely relaxed about in an interview.  I do prefer well named variables so I can follow along with your code more easily, but outside of that, don't waste too much time on what the code looks like as long as you can still understand it.</p><ul><li>testing</li><li>explanation</li></ul><p>Hopefully you've been talking out loud the whole time, clarifying requirements and stating assumptions, explaining formulas you choose, etc.  If you've been doing this, the explanation is probably already taken care of.  Some people do work through problems better in their heads however and in those cases, I want to see a very detailed explanation of your code at the end, initiated by you.  I really like self explanatory code, but you probably didn't write that in your hour long interview unless the question was trivial.  Make sure that I understand every detail of your solution, especially the reasons for your assumptions.</p><p>At the end of a technical interview question I'm going to ask you if it's correct.  Now I want a different kind of explanation of your code, I want you to convince me you believe it is correct.  If applicable to the problem, remember the phrase <em>&quot;convince me with numbers&quot;</em>.  Write some actual input and the expected output, then walk through the solution line by line making sure that the result is the correct.  When you do this, don't choose the same numbers you used when you were determining the solution, of course it works for that case.  Choose a different set of numbers this time for us to walk through and you will be more convinced than you were and you will likely convince me as well.  In the case of design problems, take the list of requirements as given, enumerate through them and show the exact part of the solution which addresses each requirement.</p><h2>An example from a question I am now retiring</h2><p>Landing an interview for a team you really want to be a part of is very nerve racking.  You'll probably go into the phone screen and first couple of interviews as a complete mess, barely able to think about the questions you're being asked and completely anxious about the technical part.  It is our goal to get you to <a href="http://www.youtube.com/watch?v=QPPN_gkj_gk" target="_blank" rel="noopener">be cool</a>, and one of the most powerful ways to do that is to get you to talk.  Coincidently it's a great way to tell the interviewer enough information for them to make a hiring decision.  <strong>Be prepared to talk</strong>.</p><p>When I'm very anxious or very relaxed, everything is funny and I can't stop telling jokes.  There is a level in between very anxious and very relaxes where I don't even understand why jokes are funny, but that's where I perform my best.  One of my tricks before an interview was to tell myself jokes and laugh out loud for a few minutes.  Laughing to me is very relaxing, and this was my way of getting in the zone.</p><p>As soon as the interview starts, my number one goal is to get to a point where you feel comfortable talking out loud, and that means we're going to talk about whatever <em>you</em> want to talk about.  You need to take this opportunity to do whatever it is that will calm you down because within 15 minutes we're going to have to move on to the technical questions if we're going to keep this interview to a reasonable length.  I've even gone as far as outright asking &quot;so what do you want to talk about&quot; as my first question.</p><p>Generally speaking, I don't care what we talk about at this point, I just want it to be something you are intimately familiar with so you can teach me a thing or two.  I want to learn details about the interesting hobby you spend half your free time doing, an amazing feat you're proud of, an awesome idea you implemented or just about anything where you feel like you could interview me about it.  Keep it professional of course, and show me how passionate you are about <em>something</em>.  I'll be asking you questions along the way to see how much knowledge you have and how well you can explain to me things I actually don't know about.</p><h3>The question</h3><p>So now you get the question.  I made the mistake in one of my first interviews of calling the first question easy because I thought it would help calm the person down.  In fact it turned out to be a bit of a challenge for them and I could tell they were even more nervous after that because the got caught up on the &quot;easy&quot; question.  From then on there are no &quot;easy&quot; questions, just technical questions and you should <strong>assume every technical question is non-trivial</strong>.  Approach every question with the same rigor because repeatedly fumbling a technical question under the pretense this is the &quot;easy&quot; question will inevitably look bad.</p><p>I'm going to try to state the question as closely as I actually ask it, and I strongly encourage you the reader to try to solve it before reading through the solution.</p><p>Do you know what an aspect ratio is?  I define the aspect ratio of a box as width over height:  <code>AR = W/H</code>.  We have a bounding box for a set of points, defined by two points, <code>min</code> and <code>max</code>.  <code>min</code> is the bottom left corner of the box, and <code>max</code> is the upper right corner of the box.  Because of how the points were chosen to define the box, <code>max</code> and <code>min</code> have the relationship that all elements in <code>min</code> are less than the corresponding elements in <code>max</code>.  Do you understand how the box is created?  Here is a graphical example (yes I show them this exact image):</p><p><img src="/img/problem-definition.png" alt="graphical example of box"></p><p>You will be given a box like this that is already initialized from a valid set of points.  What you need to do is implement the function <code>convertAspectRatio</code> which takes a float representing the desired aspect ratio.  The center of the box should stay the same, and the box should only expand, so either the width or height is guaranteed to stay the same length and the other one will get larger.  Does all this make sense?  A graphical example of one possible change looks like this:</p><p><img src="/img/converted-example.png" alt="graphical example of box"></p><p>Here is some code in a language I made up just for this interview to get you started:</p><pre><code>point:    x: float    y: floatbox:    min: point    max: point        void convertAspectRatio(float desiredAR):        // your code here</code></pre><p>You can make any assumptions you want to and ask me for clarification about anything you don't understand.  I'll answer every question to the best of my ability.</p><p>That's it.</p><hr><p>If you'd like to try it out, I highly recommend doing that now before you read through the solution.</p><h3>The solution</h3><p>First you should clarify anything you don't understand, and come up with a basic idea of your approach.  If you can, say what you are thinking out loud, even just snippets is better than anything.  Even if you think you understand the question, just saying what you are thinking out loud gives me an opportunity to correct any obvious misunderstandings, which I will gladly do before I allow you to go off on an hour long adventure solving a different problem.  One person who solved this question initially wrote the idea down in comments and deleted the comments as he implemented them.  This turned out to be very effective and I was able to point out a few details missed and he didn't have to think out loud as much.</p><p>At the end of this part of the solution, I want a clear indication of how you break down a problem into parts and solve each part.  This is the thought process bullet I'm looking for in every interview.  Often times you will get stuck thinking about a particular aspect of the problem and I will help you along just to get you over the hump.   A couple of great examples:</p><blockquote><p>You have already determined the existing aspect ratio and you are now trying to figure out whether the height or width needs to be adjusted.  I'll let you stew on this for a minute or two, before I'll ask you what you're thinking.  Most of the time getting stuck here is the person trying to figure out which pieces of information are useful in determining which side needs to expand, so with that in mind I'll give a hint like &quot;so you know what the current aspect ratio is and you know what the desired aspect ratio is, there are 3 possible comparisons to those, what are they?&quot;.  I knew the problem you were having is figuring out which information is useful, and so I'm more than happy to give you that information along with a hint as to how to use it.</p></blockquote><p>and:</p><blockquote><p>You now have the code broken into 2 if statements, one for converting to a smaller aspect ratio, and one for converting to a bigger aspect ratio.  You say out loud that since the side that changes is always getting larger, we just need to figure out what to multiply each side by.  I'll let you have fun trying to derive that equation for a few minutes.  Once you get sufficiently wrapped up in that charlie foxtrot I'll remind you that we know the desired aspect ratio and one side that isn't going to change.  Hopefully at this point you look back to the definition of aspect ratio I gave at the beginning and realize you just need to solve for the equation for either W or H, whichever side is going to change.</p></blockquote><p>There are a number of small problems to solve in an interview question and I want to see how you handle as many of them as possible.  Assuming you were hired and ran into a situation where you get stuck while working on a feature, I'd hope you'd ask a question to get you over the next hump rather than waste hours on something that might be obvious to someone else.  Don't take this for granted though, if you just start looking for help from me at every turn that's a clear indication of a no hire.  Try diligently to solve the problem, and don't be afraid to tell me you can figure it out if you feel like you're close and I'll give you a little more time.  Make it clear which problem you are working on at all times.</p><p>When it comes to speed, I can only re-iterate what I said earlier: it's better to have something that can be improved upon than trying to get the &quot;best&quot; answer on the first try.   For any 2 interviews, it could take the exact same amount of time to complete a question.  In the case that one is filled with dead air for the first 50% of the time, it will feel like it took much longer.  I try to mitigate this effect by writing down the start and end times for each question, but the effect on me is notable and I have no way to help you clarify the problem for the first 50% of the time.</p><p>This is a case where remembering <em>&quot;convince me with numbers&quot;</em> is completely applicable.  You should create input for all 3 cases of the comparisons for the aspect ratios and walk through each branch of your code out loud or plop a table in the document we're working on.</p><p>At this point you probably have the happy path code written and it looks something like this:</p><pre><code>point:    x: float    y: float    box:    min: point    max: point        void convertAspectRatio(float desiredAR):        height: max.y - min.y        width: max.x - min.x        currentAR: width / height                if: currentAR &lt; desiredAR // gets wider            newWidth: height * desiredAR            offset: newWidth - width / 2            max.x += offset            min.x -= offset                    if: currentAR &gt; desiredAR // gets taller            newHeight: width / desiredAR            offset: newHeight - height / 2            max.y += offset            min.y -= offset</code></pre><p>This is sort of ideal.  Solving for the easy case first gives you something you can now improve upon.  Now I say &quot;Looks great!  This definitely covers the happy path, how would you change this if it were actually production code?&quot;  Now you're looking for edge cases, and there are some important ones here, which I will once again give you time to come up with before pointing them out.</p><ul><li>What happens if the box is initialized with an empty set?  (a valid clarification to ask is whether that is valid or not since I told you it would already be a valid box)</li><li>What happens if the box is initialized with exactly 1 point?</li><li>What happens if the box has a height of 0?</li><li>What happens if the box has a width of 0?</li><li>What happens if the desiredAR is 0?</li><li>What happens if the desiredAR is negative?</li></ul><p>These are the simple cases based on the structure of the data.  Depending on how much time I want to spend on this question, all but one of these changes would require a code change to my example code and I'd ask you to make the necessary modifications if you hadn't already identified and adjusted for them.  If there is time after this, I'd change the requirement that I made up this fictional language and ask you what other edge cases are there if were to implement this in language with defined bit sizes for floats?  That opens up a whole other collection of discussion worthy topics.</p><h3>Ask me anything</h3><p>The last part of the interview I will give you the opportunity to ask me anything and I will try my damnedest to answer it.  Even if you blew me out of the water with the technical part, you can still bone yourself here by simply not asking anything.  Why?  It means you just want to work here, and that's not what we want.  We want people who are passionate about the product and who want to know more about the internals of the company.  Right now you have more access than most people will ever have to dive deep into what it's like working here, take advantage of that.</p><p>I really look forward to this part of every interview in hopes that it will give me a change to sell my product and my team to you.  I love discussing features with candidates and crazy ideas for improving the product because it shows me that you might be able to succeed in a place where you'll be responsible for coming up with most of your own work.  I want you to pry deep into some aspect about working here that would affect your decision to accept an offer. I am very passionate about the work I do and I hope you force me to share some of that with you through your questions.</p><p>I hope this information helps you prepare better for interviews by knowing what interviewers are looking for and makes interviews seem a bit less overwhelming.  If you're currently in the market for a new job, <a href="http://careers.stackoverflow.com/jobs/28723/web-developer-stack-exchange-stack-exchange" target="_blank" rel="noopener">we're hiring</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As an interviewee, I always wished I could know what the interviewer was looking for in the interview.  I wish I could see in their mind 
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Open source and the ability to modify code</title>
    <link href="http://culture-of-development.com/blog/open-source-and-the-ability-to-modify-code/"/>
    <id>http://culture-of-development.com/blog/open-source-and-the-ability-to-modify-code/</id>
    <published>2013-02-28T14:29:00.000Z</published>
    <updated>2016-06-15T14:00:14.387Z</updated>
    
    <content type="html"><![CDATA[<p>If you google for the <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;ie=UTF-8#hl=en&amp;sclient=psy-ab&amp;q=advantages%20of%20open%20source%20software&amp;oq=&amp;gs_l=&amp;pbx=1&amp;fp=abb3d512a9f598c1&amp;ion=1&amp;bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&amp;bvm=bv.43148975,d.eWU&amp;biw=1264&amp;bih=1487" target="_blank" rel="noopener">advantages of open source software</a>, you will get results that enumerate a few ideas like this:</p><ol><li>It's cheaper!</li><li>It's more secure!</li><li>No vendor lock!</li><li>Better quality!</li><li>Auditability!</li><li>Customizability!</li><li>???</li><li>...</li></ol><p>And if you read what they write under customizability, what they mean is that you can modify the code for your own system.   Modifying open source software for your own system is <em>highly inadvisable</em>.  As soon as you make a change, you have forked the project and forked projects are often difficult or impossible to keep up to date with changes in the master branch.</p><h3>So open source software is just for using, not for editing?</h3><p>No, of course not.  If you need to make tweaks or other changes to the code of an open source project, you should be <strong>contributing</strong> your code to those projects, and integrating the new features to your system once your code is merged.</p><p>On the <a href="http://careers.stackoverflow.com/" target="_blank" rel="noopener">Careers 2.0</a> project I write code for, all of our open source dependencies are maintained through <a href="http://nuget.org/" target="_blank" rel="noopener">nuget</a>, even the ones Stack Exchange <a href="https://github.com/ServiceStack" target="_blank" rel="noopener">employees</a> <a href="https://github.com/emmettnicholas/StacMan" target="_blank" rel="noopener">have</a> <a href="https://github.com/NickCraver/StackExchange.Exceptional" target="_blank" rel="noopener">contributor</a> <a href="https://github.com/ServiceStack/Bundler" target="_blank" rel="noopener">access</a> <a href="https://github.com/StackExchange/MiniProfiler" target="_blank" rel="noopener">to</a>.  If you want to make a change, submit a pull request, have it accepted, publish the updated nuget package and update the nuget reference in the project.  It sounds like a long path, but it keeps your system up to date and makes all of your contributions public.</p><h3>But what if there is a bug or a critical vulnerability?</h3><p>There are exactly 1 situations I can think of when it is acceptable to modify an open source project, compile it and deploy it within your system:</p><ol><li>You need an immediate fix for a vulnerability that must go live until the fix is merged into the master.</li></ol><p>When the project has a vulnerability, I'm not going to argue taking anything but the shortest line approach to fixing it.  If it's just a bug, that's just code for no better time to submit a pull request!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you google for the &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;ie=UTF-8#hl=en&amp;amp;sclient=psy-ab&amp;amp;q
      
    
    </summary>
    
      <category term="blog" scheme="http://culture-of-development.com/blog/"/>
    
    
  </entry>
  
</feed>
